/*
 *    Geotoolkit - An Open Source Java GIS Tookit
 *    http://www.geotoolkit.org
 *
 *    (C) 2009-2011, Open Source Geospatial Foundation (OSGeo)
 *    (C) 2009-2011, Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.maven.site;

import java.io.*;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.project.MavenProject;

import org.jdocfilter.FilterInstaller;

import static org.geotoolkit.maven.site.HomePageMojo.ENCODING;


/**
 * Adds the <a href="http://jdocfilter.sourceforge.net/">JDocFilter</a> to the generated javadoc.
 * Maven invocation syntax is:
 *
 * <blockquote><code>mvn org.geotoolkit.project:geotk-site:jdocfilter --non-recursive</code></blockquote>
 *
 * @author Martin Desruisseaux (Geomatys)
 * @version 3.16
 *
 * @since 3.16
 *
 * @goal jdocfilter
 * @phase post-site
 */
public class JDocFilterMojo extends AbstractMojo {
    /**
     * The Maven project running this plugin.
     *
     * @parameter expression="${project}"
     * @required
     */
    private MavenProject project;

    /**
     * Modifies the javadoc.
     *
     * @throws MojoExecutionException if the plugin execution failed.
     */
    @Override
    public void execute() throws MojoExecutionException {
        final File directory = new File(project.getBuild().getDirectory(), "site/apidocs");
        final File indexFile = new File(directory, "index.html");
        try {
            final String index = getModifiedIndex(indexFile);
            FilterInstaller.main(new String[] {directory.getPath()});
            new File(directory, "index_original.html").delete();
            final Writer out = new OutputStreamWriter(new FileOutputStream(indexFile), ENCODING);
            out.write(index);
            out.close();
        } catch (Exception e) {
            throw new MojoExecutionException(e.toString(), e);
        }
    }

    /**
     * Reads the given "index.html" file and return a modified version of it. This content will
     * overwrite the one created by the JDocFilter installation program, in order to preserve
     * metadata information generated by the standard javadoc doclet.
     */
    private static String getModifiedIndex(final File file) throws IOException {
        final StringBuilder buffer = new StringBuilder();
        final BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(file), ENCODING));
        try {
            boolean frameAdded = false;
            String line;
            while ((line = in.readLine()) != null) {
                final String trim = line.trim();
                /*
                 * Replace: <FRAMESET rows="30%,70%" title="" onLoad="top.loadFrames()">
                 *      By: <FRAMESET rows="30%,90,*" title="" onLoad="top.loadFrames()">
                 */
                if (trim.startsWith("<FRAMESET rows=\"")) {
                    final int start = line.indexOf(',');
                    final int end   = line.indexOf('"', start+1);
                    if (start >= 0 && end >= 0) {
                        buffer.append(line.substring(0, start+1)).append("90,*").append(line.substring(end)).append('\n');
                        frameAdded = true;
                        continue;
                    }
                }
                /*
                 * Insert the JDocFilter frame between the packages frame and the classes frame.
                 */
                if (frameAdded && trim.startsWith("<FRAME src=\"allclasses")) {
                    buffer.append("<FRAME src=\"jdocfilter.html\" name=\"JDocFilterFrame\" scrolling=\"no\">\n");
                }
                buffer.append(line);
                buffer.append('\n');
            }
        } finally {
            in.close();
        }
        return buffer.toString();
    }
}
