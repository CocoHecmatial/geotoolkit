<?xml version="1.0" encoding="UTF-8"?>

<faqs xmlns="http://maven.apache.org/FML/1.0.1"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
      title="Coverage FAQ" toplink="false">
  <part id="general">
    <title>General</title>
    <faq id="use">
      <question>
        How do I create and use a <code>GridCoverage2D</code>?
      </question>
      <answer>
        <p>See the overview in the <a href="index.html">module home</a> page.</p>
      </answer>
    </faq>
    <faq id="changeCRS">
      <question>
        How do I change the CRS of an existing <code>GridCoverage2D</code>?
      </question>
      <answer>
        <p><code>GridCoverage2D</code> instances are mostly immutable; their CRS can not be changed.
        If a change need to be performed - for example because the coverage has been created with
        the wrong CRS by a code that can't be easily fixed - then a new <code>GridCoverage2D</code>
        instance need to be created with the data of the previous coverage:</p>

<source>GridCoverage2D oldGC = ...;
GridGeometry gridGeom = oldGC.getGridGeometry();
CoordinateReferenceSystem crs = ...; // <i>Specify the new CRS here</i>
GridCoverageFactory factory = CoverageFactoryFinder.getGridCoverageFactory(null);
GridCoverage2D newGC = factory.create(
    oldGC.getName(),             // <i>The grid coverage name</i>
    oldGC.getRenderedImage(),    // <i>The pixel values</i>
    crs,                         // <i>The coordinate reference system</i>
    grigGeom.getGridToCRS(),     // <i>The transform from pixel to geodetic coordinates</i>
    oldGC.getSampleDimensions(), // <i>Information about each bands</i>
    null,                        // <i>The sources (not relevant in this example)</i>
    null);                       // <i>Optional properties</i></source>
        <p>Note that this FAQ is about fixing a CRS value which was wrong in the first place.
        In order to <cite>reproject</cite> the pixel values to a new CRS, use the
        <a href="../../apidocs/org/geotoolkit/coverage/processing/operation/Resample.html">resample
        operation</a>.</p>
      </answer>
    </faq>
  </part>

  <!-- ======================================================================================== -->

  <part id="io">
    <title>Image I/O</title>
    <faq id="statistics">
      <question>
        How do I get the minimal and maximal values stored in a NetCDF file?
      </question>
      <answer>
        <p>When using the Java Image I/O API, this kind of information can be stored in an
        <code><a href="http://download.oracle.com/javase/6/docs/api/javax/imageio/metadata/IIOMetadata.html">IIOMetadata</a></code>
        object. The Geotk project defines a format-neutral
        <a href="../../apidocs/org/geotoolkit/image/io/metadata/SpatialMetadataFormat.html#default-formats">spatial format</a>
        as a subset of the ISO 19115-2 metadata standard with few additions. If the NetCDF file
        defines explicit minimal and maximal values, then they should appear in the
        <code>minValue</code> and <code>maxValue</code> nodes of the above-cited metadata tree.
        A convenient way to access those values is as below:</p>

<source>NetcdfImageReader reader = ...;
SpatialMetadata metadata = reader.getImageMetadata(0);

// <i>From that point, there is a choice. You can explore</i>
// <i>the metadata using the standard API like a XML tree.</i>
// <i>Or you can use the convenience methods below.</i>

List&lt;SampleDimension&gt; bands = metadata.getListForType(SampleDimension.class);
SampleDimension firstBand = bands.get(0);
Double minValue = firstBand.getMinValue(); // <i>WARNING: Can be null!</i>
Double maxValue = firstBand.getMaxValue(); // <i>WARNING: Can be null!</i></source>

        <p><b>Tip:</b> If you wish to explore visually the metadata found in the NetCDF file, then the
        <code><a href="../../apidocs/org/geotoolkit/gui/swing/image/ImageFileChooser.html">ImageFileChooser</a></code>
        widget (defined in the <code>geotk-widgets-swing</code> module) may be useful:</p>

<source>ImageFileChooser chooser = new ImageFileChooser("NetCDF", true);
chooser.showOpenDialog(null);</source>

        <p>Select the NetCDF file, click on the "<cite>Metadata</cite>" tabs on the right side
        and select the metadata format in the combo box. The metadata tree should appear just below
        the combo box.</p>
      </answer>
    </faq>
    <faq id="gray">
      <question>
        I only get a gray rectangle for my NetCDF image.
      </question>
      <answer>
        <p>Some file formats like NetCDF do not contain color information. In such case, the color palette
        (a gray scale by default) is applied by the <code>ImageReader</code>. That color palette is scaled
        from the minimal value to the maximal value, which need to be provided by the image reader in an
        <code><a href="http://download.oracle.com/javase/6/docs/api/javax/imageio/metadata/IIOMetadata.html">IIOMetadata</a></code>
        object. If this information is missing, then the color palette will be scaled for an arbitrary
        range, typically much too large resulting in all useful values looking the same color.</p>

        <p>Using the <code>ImageFileChooser</code> widget (introduced in the <a href="#statistics">above tip</a>),
        select the file, click on the <cite>Metadata</cite> tab and select <cite>Geospatial - your image</cite>
        in the combo box where "<cite>your image</cite> is the name of the image to load. In the tree below the
        combo box, expand the <cite>Image Description</cite> node, then <cite>Dimensions</cite> and the
        specific dimension to inspect. Check if the <cite>min value</cite> and <cite>max value</cite>
        nodes exist, and if their values are reasonable.</p>

        <p>If the minimal and maximal values do not appear, they can be specified explicitly either
        by using the <code>geotk-coverage-sql</code> module, or by creating a subclass like below:</p>

<source>class MyReader extends NetcdfImageReader {
    @Override
    protected SpatialMetadata createMetadata(int imageIndex) throws IOException {
        SpatialMetadata metadata = super.createMetadata(imageIndex);
        if (imageIndex &gt;= 0) {
            double minValue, maxValue = ...; // <i> Get your min and max values here.</i>
            MetadataAccessor accessor = new MetadataAccessor(metadata, SpatialMetadataFormat.FORMAT_NAME,
                    "ImageDescription/Dimensions", "Dimension");
            accessor.selectChild(0); // <i>You may use an other index than 0 if there is many children.</i>
            accessor.setAttribute("minValue", minValue);
            accessor.setAttribute("maxValue", maxValue);
        }
        return metadata;
    }
}</source>
      </answer>
    </faq>
    <faq id="specifyCRS">
      <question>
        How do I declare the actual georeferencing of an image file?
      </question>
      <answer>
        <p>The Coordinate Reference System (CRS) in an image file should be detected automatically by
        the Image I/O plugin. However is some circonstances the plugin may fail to detect the CRS.</p>

        <p>Using the <code>ImageFileChooser</code> widget (introduced in the <a href="#statistics">above tip</a>),
        select the file, click on the <cite>Metadata</cite> tab and select <cite>Geospatial - your image</cite>
        in the combo box where "<cite>your image</cite> is the name of the image to load. In the tree below the
        combo box, expand the <cite>Rectified Grid Domain</cite> node. Some sub-nodes of special interest are:</p>
        <ul>
          <li>If <cite>Coordinate reference system</cite> is missing or contains irrelevant information,
          then a CRS will need to be specified explicitely.</li>
          <li>If <cite>Offset vectors</cite> is missing or contains wrong information, then a
          <cite>grid to CRS</cite> transform will need to be specified.</li>
        </ul>
        <p>Those metadata can be specified explicitely in a manner similar to the way <cite>minimal</cite>
        and <cite>maximal</cite> values were set in the <a href="#gray">above FAQ</a>:</p>

<source>class MyReader extends NetcdfImageReader {
    @Override
    protected SpatialMetadata createMetadata(int imageIndex) throws IOException {
        SpatialMetadata metadata = super.createMetadata(imageIndex);
        if (imageIndex &gt;= 0) {
            CoordinateReferenceSystem crs = ...; // <i>choose your CRS here</i>
            ReferencingBuilder rb = new ReferencingBuilder(metadata);
            rb.setCoordinateReferenceSystem(crs);
            // <i>If the "grid to CRS" transform need to be modified, change it here</i>
            MetadataAccessor accessor = new MetadataAccessor(metadata, SpatialMetadataFormat.FORMAT_NAME,
                    "RectifiedGridDomain/OffsetVectors", "OffsetVector");
            accessor.selectChild(accessor.appendChild());
            accessor.setAttribute("values", ...<i>put the first vector here</i>...);
            accessor.selectChild(accessor.appendChild());
            accessor.setAttribute("values", ...<i>put the second vector here</i>...);
            // <i>etc.</i>
        }
        return metadata;
    }
}</source>
      </answer>
    </faq>
  </part>

  <!-- ======================================================================================== -->

  <part id="deployment">
    <title>Deployment</title>
    <faq id="applet">
      <question>
        Can't read a TIFF image from an applet, while it worked well in standalone application.
      </question>
      <answer>
        <p>Some applications tested successfully as a standalone application or in the applet viewer
        may throw the following exception when executed as an applet in an Internet browser:</p>

<source>org.geotoolkit.coverage.io.CoverageStoreException: Can't read file "world.tiff".
No suitable image reader for this input.</source>

        <p>The reason is that <cite>World file</cite> and GeoTIFF image readers need an other
        "plain" TIFF image reader for reading pixel values. They are basically wrappers around
        a "plain" reader adding geographic metadata parsing capability.</p>

        <p>A standard TIFF image reader is provided in the <cite>Image I/O extension for JAI</cite>
        library, which must be reachable on the classpath. However in the particular case of applets,
        having the JAI library on the classpath is not sufficient. For unknown reasons, the automatic
        Image I/O registration does not seem to work in applet context. Registration must be forced
        programmatically as below:</p>

<source>import javax.imageio.spi.IIORegistry;
import com.sun.media.imageioimpl.plugins.tiff.TIFFImageReaderSpi;
import org.geotoolkit.image.io.plugin.WorldFileImageReader;
import org.geotoolkit.image.io.plugin.GeoTiffImageReader;

<i>(...snip...)</i>

IIORegistry registry = IIORegistry.getDefaultInstance();
registry.registerServiceProvider(new TIFFImageReaderSpi(), ImageReaderSpi.class);
registry.registerServiceProvider(new GeoTiffImageReader.Spi("TIFF"), ImageReaderSpi.class);
WorldFileImageReader.Spi.registerDefaults(registry);
</source>
      </answer>
    </faq>
  </part>
</faqs>
