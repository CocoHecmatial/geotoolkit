/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2005 - 2008, Open Source Geospatial Foundation (OSGeo)
 *    (C) 2008 - 2009, Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.display.primitive;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.geotoolkit.display.canvas.DisplayObject;
import static org.apache.sis.util.ArgumentChecks.*;
import org.geotoolkit.util.WeakPropertyChangeListener;
import org.opengis.display.canvas.Canvas;
import org.opengis.display.primitive.Graphic;

/**
 * The root abstraction of a graphic object taxonomy, specifying the methods common to a
 * lightweight set of graphic objects.
 *
 * @module pending
 * @since 2.3
 * @version $Id$
 * @author Martin Desruisseaux (IRD)
 * @author Johann Sorel (Geomatys)
 */
public abstract class AbstractGraphic extends SceneNode implements Graphic, PropertyChangeListener {
        
    /**
     * The canvas that own this graphic, or {@code null} if none.
     */
    protected final Canvas canvas;

    /**
     * Creates a new graphic. The {@linkplain #getZOrderHint z-order} default to positive infinity
     * (i.e. this graphic is drawn on top of everything else). Subclasses should invokes setters
     * methods in order to define properly this graphic properties.
     */
    protected AbstractGraphic(final Canvas canvas) {
        ensureNonNull("canvas", canvas);
        this.canvas = canvas;

        if(this.canvas instanceof DisplayObject)
            ((DisplayObject)this.canvas).addPropertyChangeListener(
                    new WeakPropertyChangeListener(canvas, this));

    }

    /**
     * If this display object is contained in a canvas, returns the canvas that own it.
     * Otherwise, returns {@code null}.
     *
     * @return Canvas, The canvas that this graphic listen to.
     */
    public Canvas getCanvas() {
        return canvas;
    }

    /**
     * Property change event generated by the canvas.
     */
    @Override
    public void propertyChange(final PropertyChangeEvent evt){}
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void dispose() {
        synchronized (getTreeLock()) {
            super.dispose();
            if(this.canvas instanceof DisplayObject)
                ((DisplayObject)this.canvas).removePropertyChangeListener(this);
        }
    }

    /**
     * Returns the lock for synchronization. If this object is contained in a canvas,
     * then this method returns the same lock than the canvas.
     */
    public final Object getTreeLock() {
        final Canvas candidate = this.canvas;
        return (candidate != null) ? (Object) candidate : (Object) this;
    }

}
