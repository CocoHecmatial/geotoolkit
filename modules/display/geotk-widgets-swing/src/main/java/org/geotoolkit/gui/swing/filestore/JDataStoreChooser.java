/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2012, Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 3 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.gui.swing.filestore;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.AbstractAction;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.geotoolkit.data.DataStore;
import org.geotoolkit.data.DataStoreFactory;
import org.geotoolkit.data.DataStoreFinder;
import org.geotoolkit.gui.swing.propertyedit.JFeatureOutLine;
import org.geotoolkit.gui.swing.resource.MessageBundle;
import org.geotoolkit.storage.DataStoreException;
import org.jdesktop.swingx.combobox.ListComboBoxModel;
import org.opengis.parameter.ParameterValueGroup;

/**
 * Panel allowing to choose a data store and configure it among the
 * declared DataStoreFactories.
 * 
 * @author Johann Sorel (Geomatys)
 * @module pending
 */
public class JDataStoreChooser extends javax.swing.JPanel {

    private static final Comparator<DataStoreFactory> SORTER = new Comparator<DataStoreFactory>() {
        @Override
        public int compare(DataStoreFactory o1, DataStoreFactory o2) {
            return o1.getDisplayName().compareTo(o2.getDisplayName());
        }
    };
    
    private final JFeatureOutLine guiEditor = new JFeatureOutLine();
    
    public JDataStoreChooser() {
        initComponents();
        guiEditPane.add(BorderLayout.CENTER,new JScrollPane(guiEditor));
        
        final Iterator<DataStoreFactory> ite = DataStoreFinder.getAvailableFactories();
        final List<DataStoreFactory> factories = new ArrayList<DataStoreFactory>();
        while(ite.hasNext()){
            factories.add(ite.next());
        }
        Collections.sort(factories, SORTER);
        
        guiList.setModel(new ListComboBoxModel(factories));
        guiList.setCellRenderer(new CoverageStoreFactoryCellRenderer());
        guiList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                final DataStoreFactory factory = (DataStoreFactory) guiList.getSelectedValue();
                final ParameterValueGroup param = factory.getParametersDescriptor().createValue();
                guiEditor.setEdited(param);
            }
        });
    }

    public DataStore getDataStore() throws DataStoreException{
        final DataStoreFactory factory = (DataStoreFactory) guiList.getSelectedValue();
        
        if(factory == null){
            return null;
        }
        
        final ParameterValueGroup param = guiEditor.getEditedAsParameter(factory.getParametersDescriptor());
        if(guiCreateNew.isSelected()){
            return factory.createNew(param);
        }else{
            return factory.create(param);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guiSplit = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        guiList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        guiEditPane = new javax.swing.JPanel();
        guiCreateNew = new javax.swing.JCheckBox();

        guiSplit.setDividerLocation(240);
        guiSplit.setDividerSize(2);

        guiList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(guiList);

        guiSplit.setLeftComponent(jScrollPane1);

        guiEditPane.setLayout(new java.awt.BorderLayout());

        guiCreateNew.setText(MessageBundle.getString("createNew"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(guiCreateNew, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(guiEditPane, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(guiEditPane, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guiCreateNew)
                .addContainerGap())
        );

        guiSplit.setRightComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(guiSplit, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(guiSplit, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox guiCreateNew;
    private javax.swing.JPanel guiEditPane;
    private javax.swing.JList guiList;
    private javax.swing.JSplitPane guiSplit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables


    private static class CoverageStoreFactoryCellRenderer extends DefaultListCellRenderer{

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            final JLabel lbl = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            
            if(value instanceof DataStoreFactory){
                final DataStoreFactory factory = (DataStoreFactory) value;
                final String txt = "<html><b>"+factory.getDisplayName()+"</b><br/>"
                        + "<font size=\"0.5em\"><i>&nbsp&nbsp&nbsp "+factory.getDescription()+"</i></font></html>";
                lbl.setText(txt);
            }
            
            return lbl;
        }
        
    }
    
    /**
     * Display a modal dialog.
     * 
     * @return
     * @throws DataStoreException 
     */
    public static List<DataStore> showDialog() throws DataStoreException{
        return showDialog(Collections.EMPTY_LIST);
    }
    
    /**
     * Display a modal dialog.
     * 
     * @param editors : additional FeatureOutline editors
     * @return
     * @throws DataStoreException 
     */
    public static List<DataStore> showDialog(List<JFeatureOutLine.PropertyEditor> editors) throws DataStoreException{
        final JDataStoreChooser chooser = new JDataStoreChooser();
        chooser.guiEditor.getEditors().addAll(editors);
        final JDialog dialog = new JDialog();
        
        final AtomicBoolean openAction = new AtomicBoolean(false);
        final JToolBar bar = new JToolBar();
        bar.setLayout(new FlowLayout(FlowLayout.RIGHT));
        bar.setFloatable(false);
        bar.add(new AbstractAction(MessageBundle.getString("open")) {
            @Override
            public void actionPerformed(ActionEvent e) {
                openAction.set(true);
                dialog.dispose();
            }
        });
        
        final JPanel panel = new JPanel(new BorderLayout());
        panel.add(BorderLayout.CENTER,chooser);        
        panel.add(BorderLayout.SOUTH, bar);
        dialog.setModal(true);
        dialog.setContentPane(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
        
        if(openAction.get()){
            final DataStore store = chooser.getDataStore();
            if(store == null){
                return Collections.EMPTY_LIST;
            }else{
                return Collections.singletonList(store);
            }
        }else{
            return Collections.EMPTY_LIST;
        }
        
    }
    
}
