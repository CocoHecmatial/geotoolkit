/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2012 Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.gui.swing.propertyedit.styleproperty.simple;

import java.awt.GraphicsEnvironment;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.geotoolkit.gui.swing.style.StyleElementEditor;
import org.geotoolkit.map.MapLayer;
import org.geotoolkit.style.StyleConstants;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingx.combobox.ListComboBoxModel;
import org.opengis.filter.expression.Expression;
import org.opengis.style.Font;

/**
 * Font editor pane
 *
 * @author Fabien RÃ©tif (Geomatys)
 */
public class JFontPane extends StyleElementEditor<Font> {

    private MapLayer layer = null;
    private final List<String> familyFontList;

    /**
     * Creates new form JFontPane
     */
    public JFontPane() {
        super(Font.class);
        initComponents();

        //Initialize family font list with available font family
        final GraphicsEnvironment environment = GraphicsEnvironment.getLocalGraphicsEnvironment();
        final String[] nomPolices = environment.getAvailableFontFamilyNames();
        this.familyFontList = new ArrayList(Arrays.asList(nomPolices));

        guiFamilyFontList.setModel(new ListComboBoxModel(familyFontList));

        //Initialize style font list
        final List<String> styleList = new ArrayList<String>();

        styleList.add(StyleConstants.FONT_STYLE_NORMAL_STRING);
        styleList.add(StyleConstants.FONT_STYLE_ITALIC_STRING);
        styleList.add(StyleConstants.FONT_STYLE_OBLIQUE_STRING);
        styleList.add(StyleConstants.FONT_STYLE_NORMAL_STRING + " " + StyleConstants.FONT_WEIGHT_BOLD_STRING);
        styleList.add(StyleConstants.FONT_STYLE_ITALIC_STRING + " " + StyleConstants.FONT_WEIGHT_BOLD_STRING);
        styleList.add(StyleConstants.FONT_STYLE_OBLIQUE_STRING + " " + StyleConstants.FONT_WEIGHT_BOLD_STRING);

        guiStyleList.setModel(new ListComboBoxModel(styleList));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        jScrollPane1 = new JScrollPane();
        guiFamilyFontList = new JList();
        jScrollPane2 = new JScrollPane();
        guiStyleList = new JList();
        jScrollPane3 = new JScrollPane();
        guiSizeList = new JList();
        guiFontFamily = new JTextField();
        guiStyle = new JTextField();
        guiSize = new JTextField();

        guiFamilyFontList.setModel(new AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        guiFamilyFontList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                propertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(guiFamilyFontList);

        guiStyleList.setModel(new AbstractListModel() {
            String[] strings = { "Normale", "Italique", "Gras", "Gras Italique" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        guiStyleList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        guiStyleList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                propertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(guiStyleList);

        guiSizeList.setModel(new AbstractListModel() {
            String[] strings = { "6", "8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "36", "48", "72", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        guiSizeList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        guiSizeList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                propertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(guiSizeList);

        Binding binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, guiFamilyFontList, ELProperty.create("${selectedElement}"), guiFontFamily, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, guiStyleList, ELProperty.create("${selectedElement}"), guiStyle, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, guiSizeList, ELProperty.create("${selectedElement}"), guiSize, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(guiFontFamily, Alignment.LEADING)
                    .addComponent(jScrollPane1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(guiStyle))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(guiSize))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(guiFontFamily, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(guiStyle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(guiSize, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void propertyChange(ListSelectionEvent evt) {//GEN-FIRST:event_propertyChange
        // TODO add your handling code here:
        firePropertyChange(PROPERTY_TARGET, null, create());
    }//GEN-LAST:event_propertyChange
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JList guiFamilyFontList;
    private JTextField guiFontFamily;
    private JTextField guiSize;
    private JList guiSizeList;
    private JTextField guiStyle;
    private JList guiStyleList;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void parse(Font target) {
        if (target != null) {

            //Parsing family fonts
            final Iterator<Expression> iterFamily = target.getFamily().iterator();
            boolean foundFamily = false;
            String currentFamily = "";
            Expression exp;

            while (!foundFamily && iterFamily.hasNext()) {
                exp = iterFamily.next();

                if (isStatic(exp)) {
                    currentFamily = exp.evaluate(null, String.class);

                    foundFamily = this.familyFontList.contains(ui);
                }
            }

            if (foundFamily) {
                guiFamilyFontList.setSelectedValue(currentFamily, true);
            }

            //Parsing size
            exp = target.getSize();
            if (isStatic(exp)) {
                guiSizeList.setSelectedValue(exp.evaluate(null, String.class), true);
            }

            //Parsing style. Warning style and weight are mixed in graphic mode
            Expression style = target.getStyle();
            Expression weight = target.getWeight();

            if (isStatic(style) && isStatic(weight)) {
                String w = weight.evaluate(null, String.class);
                if (w.equalsIgnoreCase(StyleConstants.FONT_WEIGHT_BOLD_STRING)) {
                    guiStyleList.setSelectedValue(style.evaluate(null, String.class) + " " + w, true);
                } else {
                    guiStyleList.setSelectedValue(style.evaluate(null, String.class), true);
                }
            }
        }
    }

    @Override
    public Font create() {

        String style = guiStyle.getText();
        String weight = StyleConstants.FONT_WEIGHT_NORMAL_STRING;

        if (style.contains(StyleConstants.FONT_WEIGHT_BOLD_STRING)) {
            style = style.replaceAll(StyleConstants.FONT_WEIGHT_BOLD_STRING, "").trim();
            weight = StyleConstants.FONT_WEIGHT_BOLD_STRING;
        }

        return getStyleFactory().font(
                getFilterFactory().literal(guiFontFamily.getText()),
                getFilterFactory().literal(style),
                getFilterFactory().literal(weight),
                getFilterFactory().literal(guiSize.getText()));
    }
}
