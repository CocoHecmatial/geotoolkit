/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2007 - 2008, Open Source Geospatial Foundation (OSGeo)
 *    (C) 2008 - 2009, Johann Sorel
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.gui.swing.propertyedit.styleproperty.simple;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JTextField;
import org.geotoolkit.gui.swing.style.StyleElementEditor;
import org.geotoolkit.map.MapLayer;
import org.opengis.filter.expression.Expression;

/**
 * Text expression editor
 * @author Fabien RÃ©tif
 * @module pending
 */
public class JTextExpressionPane extends StyleElementEditor<Expression>{

    /** Creates new form JColorExpressionPane */
    public JTextExpressionPane() {
        super(Expression.class);
        initComponents();
    }

    @Override
    public void setLayer(final MapLayer layer) {
        super.setLayer(layer);        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guiText = new JTextField();

        setOpaque(false);
        setLayout(new BorderLayout());

        guiText.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                guiTextActionPerformed(evt);
            }
        });
        add(guiText, BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void guiTextActionPerformed(final ActionEvent evt) {//GEN-FIRST:event_guiTextActionPerformed
        parse( getFilterFactory().literal( guiText.getText()) );
    }//GEN-LAST:event_guiTextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField guiText;
    // End of variables declaration//GEN-END:variables

    @Override
    public void parse(final Expression target) {
        if(target != null){
            if(isStatic(target)){
                guiText.setText(target.toString());
            }
        }
    }

    @Override
    public Expression create() {        
            return getFilterFactory().literal( guiText.getText() );        
    }

}
