/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2012 Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.gui.swing.style;

import javax.swing.DefaultBoundedRangeModel;
import javax.swing.GroupLayout;
import javax.swing.JSlider;
import javax.swing.LayoutStyle;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.geotoolkit.filter.FilterUtilities;
import static org.geotoolkit.gui.swing.style.StyleElementEditor.getFilterFactory;
import org.geotoolkit.map.MapLayer;
import org.opengis.filter.expression.Expression;

/**
 * Slider and spinner component.
 *
 * @author Fabien RÃ©tif (Geomatys)
 * @author Johann Sorel (Geomatys)
 * @module pending
 */
public class JNumberSliderExpressionPane extends StyleElementEditor<Expression> {

    public JNumberSliderExpressionPane() {
        super(Expression.class);
        initComponents();
    }

    public void setModel(final int value, final int min, final int max, final int step) {
        guiNumber.setModel(value, min, max, step);
        guiSlider.setModel(new DefaultBoundedRangeModel(value, step, min, max));
    }
    
    public void setExpressionVisible(boolean visible){
        guiNumber.setExpressionVisible(visible);
    }  
    
    @Override
    public void setLayer(final MapLayer layer) {
        super.setLayer(layer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guiSlider = new JSlider();
        guiNumber = new JNumberExpressionPane();

        guiSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                guiSliderStateChanged(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(guiSlider, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guiNumber, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                .addComponent(guiNumber, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(guiSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void guiSliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_guiSliderStateChanged
        guiNumber.parse(getFilterFactory().literal(guiSlider.getValue()));
        firePropertyChange(PROPERTY_TARGET, null, create());
    }//GEN-LAST:event_guiSliderStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JNumberExpressionPane guiNumber;
    private JSlider guiSlider;
    // End of variables declaration//GEN-END:variables

    @Override
    public void parse(final Expression target) {
        if (target != null) {
            if (FilterUtilities.isStatic(target)) {
                final Number value = target.evaluate(null, Number.class);
                if (value != null) {
                    guiNumber.parse(getFilterFactory().literal(value.intValue()));
                }
            }
        }
    }

    @Override
    public Expression create() {
        return guiNumber.create();
    }
}
