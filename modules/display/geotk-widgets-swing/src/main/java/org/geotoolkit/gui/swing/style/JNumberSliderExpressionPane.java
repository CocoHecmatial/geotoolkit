/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2012 Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.gui.swing.style;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.geotoolkit.map.MapLayer;
import org.opengis.filter.expression.Expression;

/**
 * Slider and spinner component.
 *
 * @author Fabien RÃ©tif (Geomatys)
 * @author Johann Sorel (Geomatys)
 * @module pending
 */
public class JNumberSliderExpressionPane extends StyleElementEditor<Expression> {

    public JNumberSliderExpressionPane() {
        super(Expression.class);
        initComponents();
    }

    public void setModel(final int value, final int min, final int max, final int step) {
        guiNumber.setModel(new SpinnerNumberModel(value, min, max, step));
        guiSlider.setModel(new DefaultBoundedRangeModel(value, step, min, max));
        guiSlider.setMinorTickSpacing(min);
        guiSlider.setMajorTickSpacing(max);
    }
    
    @Override
    public void setLayer(final MapLayer layer) {
        super.setLayer(layer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        guiSlider = new JSlider();
        guiNumber = new JSpinner();

        setLayout(new GridBagLayout());

        guiSlider.setPaintLabels(true);
        guiSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                guiSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridwidth = GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(guiSlider, gridBagConstraints);

        guiNumber.setModel(new SpinnerNumberModel());
        guiNumber.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                guiNumberStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 24;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        add(guiNumber, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void guiNumberStateChanged(final ChangeEvent evt) {//GEN-FIRST:event_guiNumberStateChanged
    guiSlider.setValue((Integer) guiNumber.getValue());
    firePropertyChange(PROPERTY_TARGET, null, create());
}//GEN-LAST:event_guiNumberStateChanged

    private void guiSliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_guiSliderStateChanged
        guiNumber.setValue(guiSlider.getValue());
    }//GEN-LAST:event_guiSliderStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JSpinner guiNumber;
    private JSlider guiSlider;
    // End of variables declaration//GEN-END:variables

    @Override
    public void parse(final Expression target) {
        if (target != null) {
            if (isStatic(target)) {
                final Number value = target.evaluate(null, Number.class);
                if (value != null) {
                    guiNumber.setValue(value.intValue());
                }
            }
        }
    }

    @Override
    public Expression create() {
        return getFilterFactory().literal(((SpinnerNumberModel) guiNumber.getModel()).getNumber());
    }
}
