<?xml version="1.0" encoding="UTF-8"?>

<faqs title="Referencing FAQ" toplink="false">
  <part id="intro">
    <title>Getting started</title>
    <faq id="demos">
      <question>
        How do I transform a coordinate?
      </question>
      <answer>
        <p>See the referencing section in the <a href="../../demos/geotk-simples/">simple demos</a> page.</p>
      </answer>
    </faq>
  </part>

  <!-- ======================================================================================== -->

  <part id="crs">
    <title>Coordinate Reference Systems</title>
    <faq id="JavaDB">
      <question>
        How to fix the "No suitable driver found for jdbc:derby" exception?
      </question>
      <answer>
        <p>If you are developing a desktop application with Maven, make sure that your project declares
        a dependency to the <code>derby</code> artifact from the <code>org.apache.derby</code> group.
        This is not done automatically by Geotk (except the <a href="geotk-epsg-javadb">geotk-epsg-javadb</a>
        convenience module) because the choice of the database engine (Access, PostgreSQL, <i>etc.</i>)
        is left to the users.</p>

        <p>If you are developing a desktop application without Maven, make sure that the
        <code>derby.jar</code> file is presents on the classpath.</p>

        <p>If you are developing a server application to be deployed in a container like
        Glassfish or Tomcat, make sure that the Derby dependency does <strong>not</strong> appear
        in the WAR file. <strong>This is the opposite of what one may intuitively think</strong>.
        See the <a href="geotk-epsg-javadb">geotk-epsg-javadb</a> module for more explanation.</p>
      </answer>
    </faq>
    <faq id="embedded">
      <question>
        Can I embed a small EPSG factory in my application without the need for JavaDB?
      </question>
      <answer>
        <p>Yes. The GeoTools project was used to provide a <code>gt-epsg-wkt</code> module, which
        contain a plain text file listing various CRS in their <cite>Well Known Text</cite> (WKT)
        format. This text file is not provided in Geotk because it contained only a subset of the
        EPSG database, and the CRS defined in that file are not fully compliant with EPSG (especially
        regarding axis order). However Geotk provides the factory class that exploit this file, but it
        is up to the user to provide the file itself with the CRS of his choice. The only required
        action is to make that file available in the classpath (typically inside a JAR file) under
        the following directory and name:</p>

<blockquote><pre>org/geotoolkit/referencing/factory/espg/epsg.properties</pre></blockquote>

        <p>No coding is required to make it works, unless you wish to search for the
        <code>epsg.properties</code> file in an other directory (see
        <code><a href="../../apidocs/org/geotoolkit/referencing/factory/epsg/PropertyEpsgFactory.html">PropertyEpsgFactory</a></code>
        for more information). In order to create a <code>epsg.properties</code> file, the resources provided in the GeoTools
        <code><a href="https://svn.osgeo.org/geotools/trunk/modules/plugin/epsg-wkt">gt-epsg-wkt</a></code>
        module can be used as a starting point</p>

        <p>Note that if a connection to an EPSG database is found, then that database will have
        precedence over the CRS defined in the properties file. If the properties file seems to
        be ignored when it should not, the code snippet provided in the
        <code><a href="../../apidocs/org/geotoolkit/referencing/factory/FactoryDependencies.html">FactoryDependencies</a></code>
        javadoc may provide useful informations for debugging purpose.</p>
      </answer>
    </faq>
    <faq id="Google">
      <question>
        How do I instantiate a Google projection?
      </question>
      <answer>
        <p>The Google projection is a Mercator projection that <em>pretends</em> to be defined on
        the WGS84 datum, but actually ignores the ellipsoid nature of that datum and uses the
        simplier spherical formulas instead. In Geotk this behavior can be obtained for any
        projections (not only the Mercator one used by Google) with explicit declarations of
        <code>"semi_major"</code> and <code>"semi_minor"</code> parameter values, like in the
        example below. Those parameters are usually infered from the datum, but explicit
        declarations override the inferred values.</p>

<blockquote><pre>PROJCS["Google Mercator",
  GEOGCS["WGS 84",
    DATUM["World Geodetic System 1984",
      SPHEROID["WGS 84", 6378137, 298.257223563]],
    PRIMEM["Greenwich", 0],
    UNIT["degree", 0.017453292519943295]],
  PROJECTION["Mercator (1SP)"],
  <b>PARAMETER["semi_major", 6378137]</b>,
  <b>PARAMETER["semi_minor", 6378137]</b>,
  UNIT["m", 1]]</pre></blockquote>

        <p>Since version 6.15 of the <a href="http://www.epsg.org">EPSG</a> database, it is also
        possible to simply invoke <code>CRS.decode("EPSG:3857")</code>. The result of that method
        call is slightly different in that the <code>"semi_minor"</code> parameter is not modified.
        Instead EPSG handles that projection with a new Operation Method called "<cite>Popular
        Visualisation Pseudo Mercator</cite>".</p>
      </answer>
    </faq>
    <faq id="lookupIdentifier">
      <question>
        How do I get the EPSG code of an existing CRS?
      </question>
      <answer>
        <p>The <em>identifier</em> of a Coordinate Reference System (CRS) object can be obtained by the
        <code>getIdentifiers()</code> method, which usually return a collection of zero or one element.
        If the CRS has been created from a <cite>Well Known Text</cite> (WKT) parsing and the WKT ends
        with an <code>AUTHORITY["EPSG", "<var>xxxx</var>"]</code> element, then the identifier (an EPSG
        code in this example) is the value in that <code>AUTHORITY</code> element. If the CRS has been
        created from the EPSG <cite>Authority Factory</cite>, then the factory should have already put
        the code in the collection of identifiers. If the CRS has been created in a different way, then
        the collection returned by the <code>getIdentifiers()</code> method may or may not be empty depending
        if the program that created the CRS has taken the responsability of providing an identifier.</p>

        <p>If the collection of identifiers is empty, the most effective fix is to make sure that
        the WKT contains an <code>AUTHORITY</code> declaration. If this is not possible, then the
        <code>org.geotoolkit.referencing.CRS</code> class contains some <code>lookupIdentifier(...)</code>
        convenience methods which may help. Example:</p>

<blockquote><pre>CoordinateReferenceSystem myCRS = ...;
String identifier = CRS.lookupIdentifier(Citations.EPSG, myCRS, true);
if (identifier != null) {
    System.out.println("The EPSG code has been found: " + identifier);
}</pre></blockquote>

        <p>The above call will first inspects the collection returned by <code>myCRS.getIdentifiers()</code>.
        If no suitable value is found, then it will scan the EPSG database for a CRS equals (ignoring
        metadata) to the given one. <strong>Note that this scan is sensitive to axis order.</strong>
        Most geographic CRS in the EPSG database are declared with (<var>latitude</var>, <var>longitude</var>)
        axis order. Consequently If the given CRS has (<var>longitude</var>, <var>latitude</var>) axis
        order, then the scan is likely to find no match unless it has been instructed to force the
        longitude axis to appear first.</p>
      </answer>
    </faq>
  </part>

  <!-- ======================================================================================== -->

  <part id="transforms">
    <title>Coordinate transformations</title>
    <faq id="BursaWolf">
      <question>
        Why do I get a "Bursa-Wolf parameters required" <code>ProjectionException</code>?
      </question>
      <answer>
        <p>Coordinate Reference Systems (CRS) approximate the Earth's shape by an ellipsoid.
        Different ellipsoids (actually different <em>datum</em>) are used in different countries
        of the world and at different time in history. When transforming coordinates between two
        CRS using the same datum, no Bursa-Wolf parameters are needed. But when the transformation
        involves a change of datum, the referencing module needs some information about how to
        perform that datum shift.</p>

        <p>There is many way to specify how to perform a datum shift, and most of them are only
        <em>approximation</em>. The Bursa-Wolf method is one of them, not the only one. However
        it is the most frequently used method in Geotk. In Well Known Text (WKT) format, the
        Bursa-Wolf parameters are specified inside a <code>TOWGS84</code> element. If the CRS
        are parsed from a WKT string, make sure that the string contains the <code>TOWGS84</code>
        element.</p>

        <p>If there is no known Bursa-Wolf parameters that could be provided, it is possible to
        instruct Geotk to attempt the coordinate transformation despite that. However the
        results may be one kilometre away from the expected locations.</p>

        <ul>
          <li><p>If the transform is created using the convenience static methods defined in the
              <code>CRS</code> class, then use <code>CRS.findMathTransform(sourceCRS, targetCRS,
              true)</code>. Note the optional boolean argument which shall be explicitly set to
              <code>true</code>, meaning "<cite>lenient datum shift</cite>".</p></li>

          <li><p>If the transform is created from the <code>CoordinateOperationFactory</code>
              interface, then use the following code snippet:</p>

<blockquote><pre>Hints hints = new Hints(Hints.LENIENT_DATUM_SHIFT, Boolean.TRUE);
factory = FactoryFinder.getCoordinateOperationFactory(hints);</pre></blockquote></li>
        </ul>
      </answer>
    </faq>

    <faq id="AxisOrder">
      <question>
        My transformed coordinates are totally wrong!
      </question>
      <answer>
        <p>This is most frequently caused by ordinate values given in the wrong order. Developpers
        tend to assume a (<var>x</var>, <var>y</var>) or (<var>longitude</var>, <var>latitude</var>)
        axis order. But geographers and pilotes are using (<var>latitude</var>, <var>longitude</var>)
        axis order for centuries, and the <a href="http://www.epsg.org/">EPSG</a> database defines
        geographic Coordinate Reference Systems that way. If a coordinate transformation seems to
        produce totally wrong values, the first thing to do should be to print the source and target
        Coordinate Reference Systems:</p>

<blockquote><pre>System.out.println(sourceCRS);
System.out.println(targetCRS);</pre></blockquote>

        <p>Attention should be paid to the order of <code>AXIS</code> elements. In the example below,
        the Coordinate Reference System clearly uses (<var>latitude</var>, <var>longitude</var>) axis
        order:</p>

<blockquote><pre>GEOGCS["WGS 84",
  DATUM["World Geodetic System 1984",
    SPHEROID["WGS 84", 6378137.0, 298.257223563]],
  PRIMEM["Greenwich", 0.0],
  UNIT["degree", 0.017453292519943295],
  <b>AXIS</b>["Geodetic latitude", <b>NORTH</b>],
  <b>AXIS</b>["Geodetic longitude", <b>EAST</b>],
  AUTHORITY["EPSG","4326"]]</pre></blockquote>

        <p>If (<var>longitude</var>, <var>latitude</var>) axis order is really wanted, Geotk can
        be forced to that order in two ways:</p>

        <ul>
          <li><p>If CRS are created from authority codes using the convenience static methods defined
              in the <code>CRS</code> class, then use <code>CRS.decode(myCode, true)</code>. Note
              the optional boolean argument which shall be explicitly set to <code>true</code>,
              meaning "<cite>force longitude first axis order</cite>".</p></li>

          <li><p>If CRS are created from the <code>AuthorityFactory</code> interface, then use the
              following code snippet (assuming that the EPSG authority is wanted):</p>

<blockquote><pre>Hints hints = new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.TRUE);
factory = AuthorityFactoryFinder.getCRSAuthorityFactory("EPSG", hints);</pre></blockquote></li>
        </ul>
      </answer>
    </faq>

    <faq id="ProjectionName">
      <question>
        I have correct axis order but my transformed coordinates are still wrong.
      </question>
      <answer>
        <p>Make sure that the right projection is used. Some projection names are confusing. For
        example "<cite>Oblique Mercator</cite>" and "<cite>Hotine Oblique Mercator</cite>" (in EPSG
        naming) are two different projections. But Oblique Mercator (<strong>not</strong> Hotine) in
        EPSG naming is also called "<cite>Hotine Oblique Mercator Azimuth Center</cite>" by ESRI,
        while <strong>Hotine</strong> Oblique Mercator (EPSG naming) is called "<cite>Hotine Oblique
        Mercator Azimuth Natural Origin</cite>" by ESRI.</p>

        <p>The "<cite>Oblique Stereographic</cite>" projection (EPSG name) is called "<cite>Double
        Stereographic</cite>" by ESRI. ESRI also defines a "<cite>Stereographic</cite>" projection,
        which is actually an oblique projection like the former but using different formulas.</p>

        <p>The "<cite>Krovak</cite>" projection in ESRI takes implicitly (<var>southing</var>,
        <var>westing</var>) axis orientation, while all projections in Geotk (including Krovak)
        default to (<var>easting</var>, <var>northing</var>) axis orientation, as required by the
        OGC 01-009 specification. In order to get the ESRI behavior with such projections, axis
        orientation must be explicitly specified in Geotk, for example with <code>AXIS</code>
        elements in Well Known Text (WKT) format.</p>
      </answer>
    </faq>
  </part>
</faqs>
