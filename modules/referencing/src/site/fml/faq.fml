<?xml version="1.0" encoding="UTF-8"?>

<faqs xmlns="http://maven.apache.org/FML/1.0.1"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
      title="Referencing FAQ" toplink="false">
  <part id="intro">
    <title>Getting started</title>


    <faq id="demos">
      <question>
        How do I transform a coordinate?
      </question>
      <answer>
        <p>See the referencing section in the <a href="../../demos/index.html">demos</a> page.</p>
      </answer>
    </faq>


    <faq id="supportedCodes">
      <question>
        Which map projections are supported?
      </question>
      <answer>
        <p>The operation <em>methods</em> (including, but not limited to, map projections) and their parameters
        are listed in the <a href="operation-parameters.html">Coordinate Operation parameters</a> page.
        Pre-configured instances of coordinate operations (most of them defined by the EPSG database) are
        listed in the <a href="supported-codes.html">Authority codes for Coordinate Reference Systems</a> page.</p>
      </answer>
    </faq>


    <faq id="axisOrder">
      <question>
        What is the <cite>axis order issue</cite> and how is it addressed?
      </question>
      <answer>
        <p>The axis order is specified by the authority (typically a national agency) defining the
        <cite>Coordinate Reference System</cite> (CRS). The order depends on the CRS type and the country
        defining the CRS. In the case of geographic CRS, the (<var>latitude</var>, <var>longitude</var>)
        axis order is widely used by geographers and pilotes for centuries. However software developers
        tend to consistently use the (<var>x</var>,<var>y</var>) order for every kind of CRS. Those
        different practices resulted in contradictory definitions of axis order for almost every CRS
        of kind <code>GeographicCRS</code>, for some <code>ProjectedCRS</code> in the South hemisphere
        (South Africa, Australia, <i>etc.</i>) and for some polar projections among others.</p>

        <p>Recent OGC standards mandate the use of axis order as defined by the authority.
        Oldest OGC standards used the (<var>x</var>,<var>y</var>) axis order instead, ignoring any
        authority specification. Many softwares still use the old (<var>x</var>,<var>y</var>) axis
        order, because it is easier to implement. Geotk supports both conventions.</p>

        <p>By default, Geotk creates CRS with axis order <em>as defined by the authority</em>. Those CRS are created by calls to the
        <code><a href="../../apidocs/org/geotoolkit/referencing/CRS.html#decode(java.lang.String)">CRS.decode(String)</a></code>
        method. The actual axis order can be verified after the CRS creation with <code>System.out.println(crs)</code>.
        See <a href="#axisOrderInTransforms">here</a> for more information about the elements to look at.</p>

        <p>If (<var>x</var>,<var>y</var>) axis order is wanted for compatibility with older OGC
        specifications or other softwares, CRS forced to <cite>longitude first</cite> axis order can be created by call to the
        <code><a href="../../apidocs/org/geotoolkit/referencing/CRS.html#decode(java.lang.String, boolean)">CRS.decode(String, true)</a></code>
        method. Note that while the documentation said "<cite>longitude first</cite>" for simplicity,
        the implementation actually try to build a <cite>right-handed</cite> coordinate system.</p>

        <p>Note that the <a href="http://www.geoapi.org/snapshot/javadoc/org/opengis/referencing/doc-files/WKT.html"><cite>Well Known
        Text</cite> (WKT) specification</a> is part of an older OGC standard. According that widely-used standard, CRS created by calls to the
        <code><a href="../../apidocs/org/geotoolkit/referencing/CRS.html#parseWKT(java.lang.String)">CRS.parseWKT(String)</a></code>
        method will have (<var>longitude</var>, <var>latitude</var>) or (<var>x</var>,<var>y</var>) axis order
        by default if no <code>AXIS[â€¦]</code> elements were explicitly specified in the WKT.</p>

        <p>For any CRS identified by an EPSG code, the official axis order can be checked on the
        <a href="http://www.epsg-registry.org">http://www.epsg-registry.org</a> web site: Click on
        the "Retrieve by code" link and enter the numerical code. Then click on the "View" link on
        the right side, and click on the "+" symbol of the left side of "Axes".</p>
      </answer>
    </faq>
  </part>


  <part id="crs">
    <title>Coordinate Reference Systems</title>
    <faq id="UTM">
      <question>
        How do I instantiate a <cite>Universal Transverse Mercator</cite> (UTM) projection?
      </question>
      <answer>
        <p>The easiest way is to use the "<code>EPSG</code>" or "<code>AUTO</code>" authority factory.
        The EPSG code of some UTM projections can be determined as below, where <var>zone</var> is a
        number from 1 to 60 inclusive (unless otherwise specified):</p>
        <ul>
          <li>WGS 84 (northern hemisphere): 32600 + <var>zone</var></li>
          <li>WGS 84 (southern hemisphere): 32700 + <var>zone</var></li>
          <li>WGS 72 (northern hemisphere): 32200 + <var>zone</var></li>
          <li>WGS 72 (southern hemisphere): 32300 + <var>zone</var></li>
          <li>NAD 83 (northern hemisphere): 26900 + <var>zone</var> (zone 1 to 23 only)</li>
          <li>NAD 27 (northern hemisphere): 26700 + <var>zone</var> (zone 1 to 22 only)</li>
        </ul>
        <p>Note that the above list is incomplete. See the EPSG database for additional UTM
        definitions (WGS 72BE, SIRGAS 2000, SIRGAS 1995, SAD 69, ETRS 89, <i>etc.</i>, most
        of them defined only for a few zones).</p>

        <p>Once the EPSG code of the UTM projection has been determined, the CRS can be obtained
        as in the example below:</p>

<blockquote><pre>int code = 32600 + zone;
CoordinateReferenceSystem crs = CRS.decode("EPSG:" + code);</pre></blockquote>

        <p>The above approach requires the EPSG database to be installed. If installing the EPSG
        database is considered too heavy, a lighther approach is to use the "<code>AUTO</code>"
        authority factory as below (see the
        <code><a href="../../apidocs/org/geotoolkit/referencing/factory/web/AutoCRSFactory.html">AutoCRSFactory</a></code>
        javadoc for more details):</p>

<blockquote><pre>int centralMeridian = <var>zone</var> * 6 - 183;
int latitudeOfOrigin = 0;
CoordinateReferenceSystem crs = CRS.decode("AUTO:42001," + centralMeridian + "," + latitudeOfOrigin);</pre></blockquote>

        <p>Finally the most powerful (but also the most difficult) way is to instantiate directly
        a <code>MathTransform</code> using the parameters documented in the
        <code><a href="../../apidocs/org/geotoolkit/referencing/operation/provider/TransverseMercator.html">TransverseMercator</a></code>
        class, and build a <code>DefaultProjectedCRS</code> instance using it.</p>
      </answer>
    </faq>


    <faq id="Google">
      <question>
        How do I instantiate a Google projection?
      </question>
      <answer>
        <p>The Google projection is a Mercator projection that <em>pretends</em> to be defined on
        the WGS84 datum, but actually ignores the ellipsoid nature of that datum and uses the
        simpler spherical formulas instead. In Geotk this behavior can be obtained for any
        projections (not only the Mercator one used by Google) with explicit declarations of
        <code>"semi_major"</code> and <code>"semi_minor"</code> parameter values, like in the
        example below. Those parameters are usually inferred from the datum, but explicit
        declarations override the inferred values.</p>

<blockquote><pre>PROJCS["Google Mercator",
  GEOGCS["WGS 84",
    DATUM["World Geodetic System 1984",
      SPHEROID["WGS 84", 6378137, 298.257223563]],
    PRIMEM["Greenwich", 0],
    UNIT["degree", 0.017453292519943295]],
  PROJECTION["Mercator (1SP)"],
  <b>PARAMETER["semi_major", 6378137]</b>,
  <b>PARAMETER["semi_minor", 6378137]</b>,
  UNIT["m", 1]]</pre></blockquote>

        <p>Since version 6.15 of the <a href="http://www.epsg.org">EPSG</a> database, it is also
        possible to simply invoke <code>CRS.decode("EPSG:3857")</code>. The result of that method
        call is slightly different in that the <code>"semi_minor"</code> parameter is not modified.
        Instead EPSG handles that projection with a new Operation Method called "<cite>Popular
        Visualisation Pseudo Mercator</cite>".</p>
      </answer>
    </faq>


    <faq id="projectionKind">
      <question>
        How can I identify the projection kind of a CRS?
      </question>
      <answer>
      <p>The "kind of projection" (<cite>Mercator</cite>, <cite>Lambert Conformal</cite>, <i>etc.</i>)
      is called <cite>Operation Method</cite> in ISO 19111 terminology. A good implementation independent
      approach is to check the value of <code>OperationMethod.getName()</code>. The operation method names
      are somewhat standardized in various ways. Some reliable names are the "<cite>OGC WKT Name</cite>"
      listed in the <a href="http://www.remotesensing.org/geotiff/proj_list/">remotesensing.org</a> web
      site.</p>

      <p>For each projection supported by Geotk, the various operation method names are available
      (indirectly) in the <code>PARAMETERS</code> constant defined in each class of the
      <a href="../../apidocs/org/geotoolkit/referencing/operation/provider/package-summary.html">providers</a>
      package. The example below uses the constant defined in the <code>AlbersEqualArea</code> class in order
      to verify if the name of the given operation method is any name or alias known to be associated to the
      <cite>Albers Equal Area</cite> projection:</p>

<blockquote><pre>ProjectedCRS crs = ...;
OperationMethod method = crs.getConversionFromBase().getMethod();
if (AbstractIdentifiedObject.nameMatches(method, AlbersEqualArea.PARAMETERS)) {
    // Do some stuff here...
}</pre></blockquote>
      </answer>
    </faq>


    <faq id="lookupIdentifier">
      <question>
        How do I get the EPSG code of an existing CRS?
      </question>
      <answer>
        <p>The <em>identifier</em> of a Coordinate Reference System (CRS) object can be obtained by the
        <code>getIdentifiers()</code> method, which usually return a collection of zero or one element.
        If the CRS has been created from a <cite>Well Known Text</cite> (WKT) parsing and the WKT ends
        with an <code>AUTHORITY["EPSG", "<var>xxxx</var>"]</code> element, then the identifier (an EPSG
        code in this example) is the value in that <code>AUTHORITY</code> element. If the CRS has been
        created from the EPSG <cite>Authority Factory</cite>, then the factory should have already put
        the code in the collection of identifiers. If the CRS has been created in a different way, then
        the collection returned by the <code>getIdentifiers()</code> method may or may not be empty depending
        if the program that created the CRS has taken the responsibility of providing an identifier.</p>

        <p>If the collection of identifiers is empty, the most effective fix is to make sure that
        the WKT contains an <code>AUTHORITY</code> declaration. If this is not possible, then the
        <code>org.geotoolkit.referencing.IdentifiedObjects</code> class contains some <code>lookupIdentifier(â€¦)</code>
        convenience methods which may help. Example:</p>

<blockquote><pre>CoordinateReferenceSystem myCRS = ...;
String identifier = IdentifiedObjects.lookupIdentifier(Citations.EPSG, myCRS, true);
if (identifier != null) {
    System.out.println("The EPSG code has been found: " + identifier);
}</pre></blockquote>

        <p>The above call will first inspects the collection returned by <code>myCRS.getIdentifiers()</code>.
        If no suitable value is found, then it will scan the EPSG database for a CRS equals (ignoring
        metadata) to the given one. <strong>Note that this scan is sensitive to axis order.</strong>
        Most geographic CRS in the EPSG database are declared with (<var>latitude</var>, <var>longitude</var>)
        axis order. Consequently If the given CRS has (<var>longitude</var>, <var>latitude</var>) axis
        order, then the scan is likely to find no match unless it has been instructed to force the
        longitude axis to appear first.</p>
      </answer>
    </faq>


    <faq id="lookupURN">
      <question>
        How do I get the "<code>urn:ogc:def:crs:â€¦</code>" URN of an existing CRS?
      </question>
      <answer>
        <p>OGC defines URN for CRS identifiers, for example <code>"urn:ogc:def:crs:epsg:7.1:4326"</code>
        where <code>"7.1"</code> is the version of the EPSG database used. URN may or may not be present
        in the set of identifiers returned by <code>crs.getIdentifiers()</code>. In many cases (especially
        if the CRS was parsed from a <cite>Well Known Text</cite>), only simple identifiers like
        <code>"EPSG:4326"</code> are provided. An easy way to build the full URN is to use the code
        below:</p>

<blockquote><pre>String urn = IdentifiedObjects.lookupIdentifier(Citations.URN_OGC, myCRS, false);</pre></blockquote>

      <p>The boolean argument can be set to <code>true</code> for allowing a database scan (see the
      FAQ item above), and the authority can also be <code>HTTP_OGC</code> for a URL of the form
      <code>"http://www.opengis.net/gml/srs/epsg.xml#4326"</code>.</p>
      </answer>
    </faq>


    <faq id="lookupReliability">
      <question>
        Can I rely on <code>IdentifiedObjects.lookupEpsgCode(â€¦)</code> to work correctly as the inverse of <code>CRS.decode(â€¦)</code>?
      </question>
      <answer>
        <p>For CRS created from the EPSG database, usually yes. Note however that
        <code>IdentifiedObjects.getIdentifier(â€¦)</code> is cheaper and insensitive to the details of
        CRS definition, since it never query the database. But it works only if the CRS declares
        explicitly its code, which is the case for CRS created from the EPSG database or parsed
        from a <cite>Well Known Text</cite> (WKT) having an <code>AUTHORITY</code> element. The
        <code>lookupEpsgCode(â€¦)</code> method on the other hand is robust to erroneous code
        declaration, since it always compares the CRS with the database content. But it fails
        if there is slight mistmatch (for example rounding errors in projection parameters)
        between the supplied CRS and the CRS found in the database.</p>
      </answer>
    </faq>
    <faq id="equalsIgnoreMetadata">
      <question>
        How can I determine if two CRS are "functionally" equal?
      </question>
      <answer>
        <p>The three following Coordinate Reference Systems:</p>
        <ul>
          <li><code>DefaultGeographicCRS.WGS84</code></li>
          <li><code>CRS.decode("CRS:84")</code></li>
          <li><code>CRS.decode("EPSG:4326", true)</code></li>
        </ul>
        <p>are not considered <code>equals(Object)</code> to each other, even though they all
        represent the same logical CRS. This is because they are associated to different metadata
        (name, identifiers, scope, domain of validity, remarks). In order to test if two CRS are
        functionally equivalent, use
        <code><a href="../../apidocs/org/geotoolkit/referencing/CRS.html#equalsIgnoreMetadata(java.lang.Object, java.lang.Object)">CRS.equalsIgnoreMetadata(Object, Object)</a></code>.</p>
      </answer>
    </faq>


    <faq id="hashCode">
      <question>
        Are CRS objects safe for use as keys in <code>HashMap</code>?
      </question>
      <answer>
        <p>Yes, every classes defined in the <code>org.geotoolkit.referencing.crs</code>,
        <code>cs</code> and <code>datum</code> packages define properly their <code>equals(Object)</code>
        and <code>hashCode()</code> methods. The Geotk library itself uses CRS objects in
        <code>HashMap</code>-like containers for caching purpose.</p>

        <p>As a side note, instances created by the Geotk <code>ReferencingObjectFactory</code> are
        unique, so even the identity check (<code>==</code>) works in a majority of cases. However
        the recommended approach still the use of <code>equals(Object)</code>.</p>
      </answer>
    </faq>
  </part>


  <part id="transforms">
    <title>Coordinate transformations</title>
    <faq id="BursaWolf">
      <question>
        Why do I get a "Bursa-Wolf parameters required" <code>ProjectionException</code>?
      </question>
      <answer>
        <p>Coordinate Reference Systems (CRS) approximate the Earth's shape by an ellipsoid.
        Different ellipsoids (actually different <em>datum</em>) are used in different countries
        of the world and at different time in history. When transforming coordinates between two
        CRS using the same datum, no Bursa-Wolf parameters are needed. But when the transformation
        involves a change of datum, the referencing module needs some information about how to
        perform that datum shift.</p>

        <p>There is many way to specify how to perform a datum shift, and most of them are only
        <em>approximation</em>. The Bursa-Wolf method is one of them, not the only one. However
        it is the most frequently used method in Geotk. In Well Known Text (WKT) format, the
        Bursa-Wolf parameters are specified inside a <code>TOWGS84</code> element. If the CRS
        are parsed from a WKT string, make sure that the string contains the <code>TOWGS84</code>
        element.</p>

        <p>If there is no known Bursa-Wolf parameters that could be provided, it is possible to
        instruct Geotk to attempt the coordinate transformation despite that. However the
        results may be one kilometre away from the expected locations.</p>

        <ul>
          <li><p>If the transform is created using the convenience static methods defined in the
              <code>CRS</code> class, then use <code>CRS.findMathTransform(sourceCRS, targetCRS,
              true)</code>. Note the optional boolean argument which shall be explicitly set to
              <code>true</code>, meaning "<cite>lenient datum shift</cite>".</p></li>

          <li><p>If the transform is created from the <code>CoordinateOperationFactory</code>
              interface, then use the following code snippet:</p>

<pre>Hints hints = new Hints(Hints.LENIENT_DATUM_SHIFT, Boolean.TRUE);
factory = FactoryFinder.getCoordinateOperationFactory(hints);</pre></li>
        </ul>
      </answer>
    </faq>


    <faq id="axisOrderInTransforms">
      <question>
        My transformed coordinates are totally wrong!
      </question>
      <answer>
        <p>This is most frequently caused by ordinate values given in the wrong order. Developpers
        tend to assume a (<var>x</var>, <var>y</var>) or (<var>longitude</var>, <var>latitude</var>)
        axis order. But geographers and pilotes are using (<var>latitude</var>, <var>longitude</var>)
        axis order for centuries, and the <a href="http://www.epsg.org/">EPSG</a> database defines
        geographic Coordinate Reference Systems that way. If a coordinate transformation seems to
        produce totally wrong values, the first thing to do should be to print the source and target
        Coordinate Reference Systems:</p>

<blockquote><pre>System.out.println(sourceCRS);
System.out.println(targetCRS);</pre></blockquote>

        <p>Attention should be paid to the order of <code>AXIS</code> elements. In the example below,
        the Coordinate Reference System clearly uses (<var>latitude</var>, <var>longitude</var>) axis
        order:</p>

<blockquote><pre>GEOGCS["WGS 84",
  DATUM["World Geodetic System 1984",
    SPHEROID["WGS 84", 6378137.0, 298.257223563]],
  PRIMEM["Greenwich", 0.0],
  UNIT["degree", 0.017453292519943295],
  <b>AXIS</b>["Geodetic latitude", <b>NORTH</b>],
  <b>AXIS</b>["Geodetic longitude", <b>EAST</b>],
  AUTHORITY["EPSG","4326"]]</pre></blockquote>

        <p>If (<var>longitude</var>, <var>latitude</var>) axis order is really wanted, Geotk can
        be forced to that order in two ways:</p>

        <ul>
          <li><p>If CRS are created from authority codes using the convenience static methods defined
              in the <code>CRS</code> class, then use <code>CRS.decode(myCode, true)</code>. Note
              the optional boolean argument which shall be explicitly set to <code>true</code>,
              meaning "<cite>force longitude first axis order</cite>".</p></li>

          <li><p>If CRS are created from the <code>AuthorityFactory</code> interface, then use the
              following code snippet (assuming that the EPSG authority is wanted):</p>

<pre>Hints hints = new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.TRUE);
factory = AuthorityFactoryFinder.getCRSAuthorityFactory("EPSG", hints);</pre></li>
        </ul>
      </answer>
    </faq>


    <faq id="projectionName">
      <question>
        I have correct axis order but my transformed coordinates are still wrong.
      </question>
      <answer>
        <p>Make sure that the right projection is used. Some projection names are confusing. For
        example "<cite>Oblique Mercator</cite>" and "<cite>Hotine Oblique Mercator</cite>" (in EPSG
        naming) are two different projections. But "Oblique Mercator" (<strong>not</strong> Hotine) in
        EPSG naming is also called "<cite>Hotine Oblique Mercator Azimuth Center</cite>" by ESRI,
        while "<strong>Hotine</strong> Oblique Mercator" (EPSG naming) is called "<cite>Hotine Oblique
        Mercator Azimuth Natural Origin</cite>" by ESRI.</p>

        <p>The "<cite>Oblique Stereographic</cite>" projection (EPSG name) is called "<cite>Double
        Stereographic</cite>" by ESRI. ESRI also defines a "<cite>Stereographic</cite>" projection,
        which is actually an oblique projection like the former but using different formulas.</p>

        <p>The "<cite>Krovak</cite>" projection in ESRI takes implicitly (<var>southing</var>,
        <var>westing</var>) axis orientation, while all projections in Geotk (including Krovak)
        default to (<var>easting</var>, <var>northing</var>) axis orientation, as required by the
        OGC 01-009 specification. In order to get the ESRI behavior with such projections, axis
        orientation must be explicitly specified in Geotk, for example with <code>AXIS</code>
        elements in Well Known Text (WKT) format.</p>
      </answer>
    </faq>


    <faq id="parameterUnits">
      <question>
        I just used the WKT of a well-known authority and my transformed coordinates are still wrong!
      </question>
      <answer>
        <p>The <cite>Well Known Text</cite> (WKT) specification has been interpreted in different ways by different implementors.
        One subtle issue is the angular units of prime meridian. The WKT specification clary states "<cite>If the <code>PRIMEM</code>
        clause occurs inside a <code>GEOGCS</code>, then the longitude units will match those of the geographic coordinate system</cite>"
        <sup>(<a href="http://www.geoapi.org/snapshot/javadoc/org/opengis/referencing/doc-files/WKT.html#PRIMEM">source</a>)</sup>.
        However ESRI and GDAL among others unconditionally use decimal degrees, ignoring this part of the WKT specification.
        This problem can be identified by WKT inspection as in the following example:</p>

<blockquote><pre>PROJCS["Lambert II Ã©tendu",
  GEOGCS["Nouvelle Triangulation FranÃ§aise",
    â€¦,
    PRIMEM["Paris", 2.337229167],
    UNIT["grad", 0.01570796326794897]]
  PROJECTION["Lambert_Conformal_Conic_1SP"],
  PARAMETER["latitude_of_origin", 46.8],
  â€¦]</pre></blockquote>

        <p>The Paris prime meridian is located at approximatively 2.597 gradians from Greenwich, which is 2.337 degrees.
        From this fact, we can see that the above WKT uses decimal degrees despite its <code>UNIT["grad"]</code> declaration.
        This mismatch applies also to the parameter value, which declare 46.8Â° in the above example while the official value
        is 52 gradians. By default, Geotk interprets those angular values as gradians when parsing such WKT, resulting in
        thousands of kilometres error. In order to get the intended result, there is a choice:</p>
        <ul>
          <li>Replace <code>UNIT["grad", 0.01570796326794897]</code> by <code>UNIT["degree", 0.017453292519943295]</code>,
          which ensure that Geotk, GDAL and ESRI understand that WKT in the same way.</li>

          <li>Or ask explicitely Geotk to parse the WKT using the ESRI or GDAL conventions, using the
          <code><a href="../../apidocs/org/geotoolkit/io/wkt/Convention.html">Convention</a></code> enumeration.</li>
        </ul>
      </answer>
    </faq>


    <faq id="slightDifferences">
      <question>
        I get slightly different results depending on the environment Iâ€™m running in.
      </question>
      <answer>
        <p>The results of coordinates converted when running in a web application container (JBoss,
        <i>etc.</i>) may be a few meters off compared to coordinates converted in an IDE (NetBeans,
        Eclipse, <i>etc.</i>). The results depend on whatever an EPSG factory is available on the
        classpath, <em>no matter how the CRS were created</em>, because the EPSG factory specifies
        explicitly the coordinate operation to apply for some pair of CRS. In such case, the
        coordinate operation specified by EPSG has precedence over the Burwa-Wolf parameters
        (the <code>TOWGS84</code> element in <cite>Well Known Text</cite>).</p>

        <p>A connection to the EPSG database may have been established for one environment (typically
        the JEE one) and not the other (typically the IDE one) because only the former has JDBC driver.
        The recommended way to uniformize the results is to add in the second environment (IDE) the
        same JDBC driver than the first environment (JEE). It should be one of the following:
        <cite>JavaDB</cite> (a.k.a. <cite>Derby</cite>), <cite>HSQL</cite> or <cite>PostgreSQL</cite>
        (the later requires manual installation of EPSG database).</p>
      </answer>
    </faq>


    <faq id="toWGS84">
      <question>
        Can I always expect a transform from an arbitrary CRS to WGS84 to succeed?
      </question>
      <answer>
        <p>For 2D horizontal CRS created from the EPSG database, calls to
        <code>CRS.findMathTransform(â€¦, true)</code> - where the <code>true</code> argument is
        for <cite>lenient datum shift</cite> - should generally succeed. For 3D CRS having any
        kind of height different than <cite>ellipsoid height</cite>, or for a 2D CRS of type
        <code>EngineeringCRS</code>, it may fail.</p>

        <p>Note however that even if the call to <code>CRS.findMathTransform(â€¦)</code> succeed,
        the call to <code>MathTransform.transform(â€¦)</code> may fail or produce <code>NaN</code>
        or infinity values if the coordinate to transform is far from the projection area of validity.</p>
      </answer>
    </faq>
  </part>
</faqs>
