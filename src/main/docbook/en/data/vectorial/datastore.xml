<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
  <!ENTITY % book.entities SYSTEM "../../../book.entities">
  %book.entities;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink = "http://www.w3.org/1999/xlink"
        id="datastore" xreflabel="datastore" lang="en">

    <title>Datastore</title>

    <para>
        When we want create
        <emphasis>FeatureTypes</emphasis> and
        <emphasis>Features </emphasis>, we had to manipulate these elements one by one.
    </para>
    <para>
        If we want send query to a set of Features, we use a
        <emphasis>Datastore</emphasis>.
        This will allow us to query and manage a session/transaction system to record changing.
    </para>

    <section>
        <title>Specifications</title>

        <para>
	    OGC or ISO have not defined a data access standard. The Geographic Markup Language (GML) et OGC Web Feature Service (WFS) are two OGC standards which define the concept of <emphasis>FeatureCollection</emphasis> but it's not good enough.
        </para>
        <para>
	    We have searched a existant model, because we didn't want make a new API. It's in CMS (Content	Management System) that we have found a interesting Java specification : <emphasis> Java Content Repository</emphasis>.	Many compagnies use this JSR and it uses in many big projects like JackRabbit, Exoplatform or Liferay.      C'est aussi une API mature qui en est à sa seconde version. (version 1 : JSR-170 et version 2 : JSR-283)
        </para>
        <para>
            JCR can federate content from multiple data sources, database or file managers. The JCR structure is similar as FeatureType and Feature which they call
            <emphasis>Node</emphasis> and
            <emphasis>NodeType</emphasis>.
        </para>
        <para>
            JCR reduces everything in primitif types inside Node objects. This operation could be complicated in GIS with geometry or projections. We have created a model which copy and transform each JCR model in SIG model. This transformation consist to convert Node and NodeType in Feature and FeatureType.
        </para>

        <figure>
            <title>Datastores structure</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/new_structure.png" format="png"></imagedata>
                </imageobject>
                <textobject>
                    <phrase> Structure des datastores
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
    </section>

    <section>
        <title>DatastoreFactory</title>
        <para>
            The factory are using to make Datastores. Each factory have its own name and the definition of  its input paramaters that it need to create a new Datastores instance.
        </para>
        <para>
            Factory implementations are registered in the Java Service Registry (META-INF/services). They enable automatic discovery of new implementations. The utility class  <emphasis>DatastoreFinder</emphasis> give us the possibity to get them quickly.
        </para>
        <example>
            <title>List the different factories datastore</title>
            <link xlink:href="https://raw.githubusercontent.com/Geomatys/geotoolkit/master/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/ListAllFactoriesDemo.java">
                <acronym>geotoolkit/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/ListAllFactoriesDemo.java</acronym>
            </link>

        </example>
    </section>

    <section>
        <title>Datastore </title>

        <example>
            <title>Creating datastore in memory</title>
            <simplelist>
                <member>
                    <link xlink:href="https://raw.githubusercontent.com/Geomatys/geotoolkit/master/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/MemoryDataStoreDemo.java">
                        <acronym>geotoolkit/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/MemoryDataStoreDemo.java</acronym>
                    </link>

                </member>

                <member>
                    <link xlink:href="https://raw.githubusercontent.com/Geomatys/geotoolkit/master/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/DataStoreReadingDemo.java">
                        <acronym>/geotk_pending/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/DataStoreReadingDemo.java</acronym>
                    </link>
                </member>

                <member>
                    <link xlink:href="https://raw.githubusercontent.com/Geomatys/geotoolkit/master/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/DataStoreWritingDemo.java">
                        <acronym>/geotk_pending/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/DataStoreWritingDemo.java</acronym>
                    </link>

                </member>
            </simplelist>
        </example>

        <para>
            Datastore is the
            Le Datastore est l'élément de base de stockage pour les features. Il est responsable du stockage sur disque (shapefile, gpx,...),
            en base de données (postgis...) ou de l'utilisation des serveurs distants (WFS). Son travail peut se limiter à la lecture mais aussi permettre l'écriture.
            Il est aussi responsable de répondre correctement aux requêtes impliquant la gestion des filtres et la reprojection si besoin.
        </para>

        <para>
            Pour obtenir un datastore, on peut le créer directement ou utiliser le DataStoreFinder :
        </para>
        <programlisting>
            final Map&lt;String, Serializable&gt; parameters = new HashMap&lt;String, Serializable&lt;();
            parameters.put("url", GPXDemo.class.getResource("/data/sampleGPX.gpx"));

            final DataStore store = DataStoreFinder.getDataStore(parameters);
        </programlisting>
        <para>
            Il est recommandé d'utiliser le DataStoreFinder car celui ci passe par des fabriques et peut potentiellement retourner un datastore déjà existant. Les datastores sont des objets concurrents et peuvent être utilisés par plusieurs threads à la fois.
        </para>
    </section>

    <section>
        <title>
            Session
        </title>
        <para>

            Une
            <emphasis>session</emphasis> est comme une vue sur le datastore. Une session peut être
            <emphasis>synchrone</emphasis> ou
            <emphasis>asynchrone</emphasis>.
            Dans le premier mode, tout changement sera poussé directement dans le datastore tandis que dans
            le second un
            <emphasis>Diff</emphasis> vivra dans la session jusqu’à un appel à
            <emphasis>commit</emphasis> (pour pousser les changements)
            ou
            <emphasis>rollback</emphasis> (pour effacer les changements).
        </para>
        <para>
            Depuis une session, il est possible de faire des requêtes sur le datastore.
        </para>
        <para>
            Une requête
            <emphasis>(Query)</emphasis> définit un filtre ainsi qu'un certain nombre d'autres contraintes. Les requêtes
            sont créées en utilisant un
            <emphasis>QueryBuilder</emphasis>.
        </para>
        <figure>
            <title>Requête sur un datastore</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/query.png" format="png"></imagedata>
                </imageobject>
                <textobject>
                    <phrase> Requête sur un datastore
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <programlisting>
<!--        -->
            final QueryBuilder qb = new QueryBuilder(typeName);
            qb.setCRS(CRS.forCode("EPSG:3395"));
            qb.setProperties(new String[]{"the_geom","LONG_NAME","SQKM"});
            qb.setFilter(FF.equals(FF.property("CURR_TYPE"), FF.literal("Norwegian Krone")));
            final Query query = qb.buildQuery();
<!--            -->
        </programlisting>
    </section>

    <section>
        <title>
            FeatureCollection
        </title>
        <para>
            Une
            <emphasis>FeatureCollection</emphasis> est le résultat d'une requête effectuée sur une session. Cette collection ne contient pas directement les Features, elle ne fait que se comporter comme une collection. C'est uniquement au moment d'acquérir un iterator et d'appeler le
            <emphasis>next()</emphasis> que le feature va être créé.
        </para>
        <para>
            Toute les opérations java standard de manipulation de collection sont implémentées. Appeler un add, contain, ...etc... va marcher. En complément, d'autres méthodes sont disponibles en utilisant des filtres. Il est aussi possible d'obtenir un sous-ensemble de feature en utilisant la methode
            <emphasis>subCollection</emphasis>.
        </para>
    </section>

    <section>
        <title>FeatureIterator</title>

        <para>
            Cet iterator est retourné par les Datastores et les sessions, c'est une iterateur java standard avec l'ajout d'une methode close afin de libérer d'éventuelle ressources associées.
        </para>
        <warning>
            Il est important de fermer correctement ses itérateurs pour éviter d'éventuelles fuites mémoire.

            L'itérateur loguera un message d'erreur avec son stack de création s'il n'a pas été fermé au moment où le ramasse-miette le supprimera.
        </warning>
    </section>
</section>