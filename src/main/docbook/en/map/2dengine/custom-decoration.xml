<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
  <!ENTITY % book.entities SYSTEM "../../../book.entities">
  %book.entities;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink = "http://www.w3.org/1999/xlink">
          
    <title>
        Custom decoration
    </title>
    
    <example>
        <title>Object graphic sur mesure</title>
        <link xlink:href="http://hg.geotoolkit.org/geotoolkit-pending/files/tip/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/rendering/customgraphicbuilder/GraphicBuilderDemo.java">
            <acronym>geotoolkit-pending/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/rendering/customgraphicbuilder/GraphicBuilderDemo.java</acronym>
        </link>        
    </example>
    
    <section>
        <title>When can i use decor ?</title>
        Decoration are available only with components of swing maps : 
        <emphasis>JMap2D</emphasis>. A decoration is just a swing component which it defines over the map. They can
        be helpful to show additional controller or information like a compass, pop-up or geometry editor.
        
        <figure> 
            <title>
                Decorations samples :
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/boussoleneo.png" format="png"></imagedata>
                </imageobject>
                
                <imageobject>
                    <imagedata fileref="../images/scalebar.png" format="png"></imagedata>
                </imageobject>
            </mediaobject>
        </figure>
    </section>
    
    <section>
        <title>How to make one ?</title>
        <para>
        It is possible to implement interface  
        <emphasis>MapDecoration</emphasis> or extend 
        <emphasis>AbstractMapDecoration</emphasis> which keep the majority of methods.</para>
    </section>
    
    <section>
        <title>Obtain a rendering like on the map</title>
        <para> 
            The decoration give us the possibility to draw like map canvas and get all mathematic transforms.
            It is possible because swing components and the rendering engine GO2 use  
            <emphasis>Java2D</emphasis>.
        </para>
        <para>
            We use the object <emphasis>RenderingContext2D</emphasis> to draw in the GraphicObject and GraphicBuilder
            tutorials. It can be created at any time and gives to canvas to be configuring.
        </para>
        <para>
            We suppose that you overload the method <emphasis>paintComponant</emphasis> of your decoration :
        </para>
            <programlisting>
                    @Override
                    protected void paintComponent(Graphics g) {
                    super.paintComponent(g);
 
                    final Graphics2D g2d = (Graphics2D) g;
 
                    final DefaultRenderingContext2D context = new DefaultRenderingContext2D(map.getCanvas());
                    map.getCanvas().prepareContext(context, g2d, g.getClip());
 
                    context.switchToObjectiveCRS();
                    // and paint like in a graphic object
                    }
            </programlisting>
        </section>
        
</section>