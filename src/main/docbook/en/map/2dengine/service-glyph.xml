<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
  <!ENTITY % book.entities SYSTEM "../../../book.entities">
  %book.entities;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink = "http://www.w3.org/1999/xlink"
	 lang="en">

    <title>
        Service-glyph
    </title>

    <example>
        <title>Generating glyph</title>
        <link xlink:href="http://hg.geotoolkit.org/geotoolkit/files/tip/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/rendering/GlyphDemo.java">
            <acronym>geotoolkit/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/rendering/GlyphDemo.java</acronym>
        </link>
    </example>

    <para>
        Only one class is using for this task :
        <emphasis>DefaultGlyphService</emphasis> with three different methods :
        <itemizedlist>
            <listitem>
                <emphasis>create</emphasis> : will generate a
                <emphasis>BufferedImage</emphasis> for the style and the given size.
            </listitem>
            <listitem>
                <emphasis>render</emphasis> : will draw glyph with Graphics2D.
            </listitem>
            <listitem>
                <emphasis>glyphPreferredSize</emphasis> : explore style sheet to find optimal size.
            </listitem>
        </itemizedlist>
    </para>

    <example>
        <title>Creating and displaying a glyph</title>
        <programlisting>

                //generate a style
                final Style style = SF.style(StyleConstants.DEFAULT_LINE_SYMBOLIZER);

                //grab the best glyph size, you may provide your own size, the service will
                //do it's best to generate a nice glyph
                final Dimension preferredSize = DefaultGlyphService.glyphPreferredSize(style, null, null);

                //create the glyph image
                final BufferedImage glyph = DefaultGlyphService.create(style, preferredSize, null);

                //show the glyph
                final JFrame frm = new JFrame();
                frm.setContentPane(new JLabel(new ImageIcon(glyph)));
                frm.setSize(100, 100);
                frm.setLocationRelativeTo(null);
                frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frm.setVisible(true);

        </programlisting>
    </example>
</section>