<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
  <!ENTITY % book.entities SYSTEM "../book.entities">
  %book.entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xi    = "http://www.w3.org/2001/XInclude"
         xmlns:xlink = "http://www.w3.org/1999/xlink">

    <title ooclass="chapiterTitle">
        ObjectConverter
    </title>

    <section>
        <title>ObjectConverter</title>
        <para>
            Geotoolkit offre la possiblité de réaliser ses propres conversion d'un type d'objet à un autre. Généralement utilisés
            pour des conversion simples (StringToFile, StringToURL, URLToFile ...), on peux également les utiliser pour des objets plus complexes.
            La liste des converteurs basique déjà présent et enregistré dans Geotoolkit ce trouve dans le package
            <link xlink:href="http://www.geotoolkit.org/apidocs/org/geotoolkit/util/converter/package-summary.html" >package org.geotoolkit.util.converter</link>.
        </para>

        <section>
            <title>Création d'un Converter.</title>
            <para>
                Un converteur ce caractérise par :
            </para>
            <itemizedlist>
                <listitem>La classe<emphasis role="bold">SOURCE</emphasis> de l'objet que l'on veux convertir.</listitem>
                <listitem>La classe<emphasis role="bold">CIBLE</emphasis>(ou TARGET) vers laquel on veux convertir notre objet source.</listitem>
            </itemizedlist>

            <para>
                Pour créer son propre converter, il faut implémenter la classe
                <link xlink:href="http://www.geotoolkit.org/apidocs/org/geotoolkit/util/converter/ObjectConverter.html">ObjectConverter</link>
                ou étendre la classe abstraite <link xlink:href="http://www.geotoolkit.org/apidocs/org/geotoolkit/util/converter/SimpleConverter.html">SimpleConverter</link>.
            </para>

            <para>
                L'exemple suivant montre la création d'un converter réalisant le passage d'une String formatée en <link xlink:href="http://en.wikipedia.org/wiki/Well-known_text">WKT</link> geometry
                <link xlink:href="http://www.vividsolutions.com/jts/jtshome.htm">JTS</link>.
            </para>

            <example>
                <title>Code complet de création d'un converter d'une String en Geometry JTS.</title>
                <link xlink:href="http://hg.geotoolkit.org/geotoolkit/files/tip/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/util/StringToGeometryConverter.java" >
                    geotoolkit/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/util/StringToGeometryConverter.java
                </link>
            </example>

            <para>
                La principale méthode a implémenter est la méthode T convert(S source) qui réalise la convertion de la classe S vers T. Lors d'erreurs de vérification ou dans le
                traitement de cette conversion, la méthode convert doit lancer une <link xlink:href="http://hg.geotoolkit.org/geotoolkit/files/tip/modules/utility/geotk-utility/src/main/java/org/geotoolkit/util/converter/NonconvertibleObjectException.java">NonconvertibleObjectException</link>.
                L'exemple suivant montre la converstion d'une String en Geometry JTS après quelque vérifications.
            </para>

            <example>
                <title>Conversion d'un WKT en Geometry</title>
                <programlisting>
    @Override
    public Geometry convert(String source) throws NonconvertibleObjectException {

        if (source != null &amp;&amp; !source.isEmpty()) {

            try {
                //Création de la GeometryFactory et du WKTReader
                final GeometryFactory gf = new GeometryFactory();
                final WKTReader reader = new WKTReader(gf);

                //Lecture de la String source
                return reader.read(source);

            } catch (ParseException ex) {
                throw new NonconvertibleObjectException(ex);
            }
        } else {
            throw new NonconvertibleObjectException("Source string can't be null or empty and should be formated in WKT.");
        }
    }
                </programlisting>
            </example>

            <para>
                Les autres méthodes à implémenter servent a récupérer les classes source et cible, et des flags pour savoir si ce converter
                conserve l'ordre, s'il a des restrictions particuliaires ou s'il inverse l'ordre. Pour plus d'informations, voir la Javadoc de
                <link xlink:href="http://www.geotoolkit.org/apidocs/org/geotoolkit/util/converter/ObjectConverter.html">ObjectConverter</link>.
            </para>

            <para>
                Pour pouvoir utiliser des converters, il faut soit faire sa registry qui contient une liste d'instance de converteur que l'on veux utiliser.
                Soit enregistrer notre converteur dans la ConverterRegistry par default en utilisant le systeme de ServiceRegistry avec la class ObjectConverter.
            </para>
        </section>

        <section>
            <title>Utilisation d'un converteur</title>
             <example>
                <title>Demo d'utilisation de la ConverterRegistry et d'un converter en particulier.</title>
                <link xlink:href="http://hg.geotoolkit.org/geotoolkit/files/tip/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/util/ConverterDemo.java" >
                    geotoolkit/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/util/ConverterDemo.java
                </link>
            </example>

            <para>
                Dans cette exemple, on a au début la récupération des tous les converteurs enregistrée dans notre ConverterRegistry, puis l'utilisation du converter precedement créer
                pour convertir un polygon d'un WKT en Geometry JTS.
            </para>

            <example>
                <title>Conversion d'un WKT en Geometry</title>
                <programlisting>
    //get converter from registry
    final ObjectConverter&lt;String, Geometry&gt; strToGeom = ConverterRegistry.system().converter(String.class, Geometry.class);
    final String wkt = "POLYGON ((110 240, 50 80, 240 70, 110 240))"; //a triangle

    final Geometry geom = strToGeom.convert(wkt);

    System.out.println("###############################################################");
    System.out.println("WKT source : " + wkt);
    System.out.println("Geometry target : " + geom);
    System.out.println("###############################################################");
                </programlisting>
            </example>
        </section>

    </section>

</chapter>
