<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
  <!ENTITY % book.entities SYSTEM "../../../book.entities">
  %book.entities;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink = "http://www.w3.org/1999/xlink">
             
    <title>Sensor Observation Service</title>
    
    <example>
        <title>Code source complet : </title>
        <link xlink:href="http://hg.geotoolkit.org/geotoolkit-pending/file/tip/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/clients/sos/SOSClientDemo.java">
            <acronym>geotoolkit-pending/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/clients/sos/SOSClientDemo.java  </acronym>
        </link>        
    </example>

    <para>
        <emphasis>Sensor Observation Service (SOS)</emphasis> est un service de l'OGC pour renvoyer des données de capteurs.
    </para>
    <para>
        Norme complète : 
        <link xlink:href="http://www.opengeospatial.org/standards/sos">http://www.opengeospatial.org/standards/sos</link>
    </para>

    <example>
        <title>Exemple</title>
        <programlisting>
            
                final MarshallerPool pool = SOSMarshallerPool.getInstance();
                Unmarshaller um = null;
 
                try {
                um = pool.acquireUnmarshaller();
 
                // build a new SOS client
                final SensorObservationServiceServer sosServer = new SensorObservationServiceServer(new URL("http://test.geomatys.com/swe_TS/WS/sos?"), "1.0.0");
  
                /**
                * make a getCapabilities request
                */
                final GetCapabilitiesRequest getCapa = sosServer.createGetCapabilities();
 
                InputStream is = getCapa.getResponseStream();
 
                // unmarshall the response
                Capabilities capabilities = (Capabilities) um.unmarshal(is);
  
                // print the title of the server
                System.out.println(capabilities.getServiceIdentification().getTitle());
  
                // extract a sensorML identifier and outputFormat to make a describeSensor request
                Operation describeSensorOperation = capabilities.getOperationsMetadata().getOperation("DescribeSensor");
  
                String sensorID = ((ValueType) describeSensorOperation.getParameter("procedure").getAllowedValues().getValueOrRange().get(0)).getValue();
                String outputFormat = ((ValueType) describeSensorOperation.getParameter("outputFormat").getAllowedValues().getValueOrRange().get(0)).getValue();
  
                // extract a all the parameters necessary to make a getObservation request
                Operation getObservationOperation = capabilities.getOperationsMetadata().getOperation("GetObservation");
  
                String offering = ((ValueType) getObservationOperation.getParameter("offering").getAllowedValues().getValueOrRange().get(0)).getValue();
                String responseFormat = ((ValueType) getObservationOperation.getParameter("responseFormat").getAllowedValues().getValueOrRange().get(0)).getValue();
                String phenomenon = ((ValueType) getObservationOperation.getParameter("observedProperty").getAllowedValues().getValueOrRange().get(0)).getValue();
                String procedure = ((ValueType) getObservationOperation.getParameter("procedure").getAllowedValues().getValueOrRange().get(0)).getValue();
                String featureOfInterest = ((ValueType) getObservationOperation.getParameter("featureOfInterest").getAllowedValues().getValueOrRange().get(0)).getValue();
  
                /**
                * make a DescribeSensor request
                */
                final DescribeSensorRequest descSensor = sosServer.createDescribeSensor();
                descSensor.setSensorId(sensorID);
                descSensor.setOutputFormat(outputFormat);
  
                is = descSensor.getResponseStream();
  
                // unmarshall the response
                AbstractSensorML sensorMLResponse = (AbstractSensorML) um.unmarshal(is);
  
                System.out.println(sensorMLResponse);
  
                /**
                * make a GetObservation request
                */
                final GetObservationRequest getObs = sosServer.createGetObservation();
                getObs.setOffering(offering);
                getObs.setObservedProperties(phenomenon);
                getObs.setProcedures(procedure);
                getObs.setResponseFormat(responseFormat);
                getObs.setFeatureOfInterest(new FeatureOfInterest(Arrays.asList(featureOfInterest)));
  
                is = getObs.getResponseStream();
  
                // unmarshall the response
                ObservationCollectionType getObsResponse = (ObservationCollectionType) um.unmarshal(is);
  
                System.out.println(getObsResponse);
  
  
  
                } finally {
                if (um != null) {
                pool.release(um);
                }
            
        </programlisting>
    </example>
</section>
