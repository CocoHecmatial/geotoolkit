<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
  <!ENTITY % book.entities SYSTEM "../../../book.entities">
  %book.entities;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink = "http://www.w3.org/1999/xlink">
             
    <title>
        FeatureType
    </title>
             
    <section>
        <title>
            Spécifications
        </title>
        <para>
            La norme à laquelle se rapporte les Feature est 
            <emphasis>ISO 19109 "Rules for application schemas"</emphasis>.
        </para>
        <para>
            Un 
            <emphasis>FeatureType</emphasis> est la définition d'un modèle. Tout comme on définit une table dans une base de données ou les colonnes dans un tableur. Le feature type va donc nous fournir des métadonnées sur ce que l'on manipule, nous donnant le nombre de propriétés, leurs noms, leurs quantités et leurs contraintes.
        </para>
        <para>
            Un 
            <emphasis>Feature</emphasis> est un enregistrement, il est toujours associé à un FeatureType qui le définit.
        </para>
        <para>
            En comparaison, un feature dans une base de données correspond à une ligne dans une table et le FeatureType serait la définition de la table.
        </para>
        <para>
            La norme permet d'avoir des FeatureType abstraits, par exemple on peut avoir un type 
            <emphasis>Voiture</emphasis> abstrait et des sous-types 
            <emphasis>Voiture de course, Utilitaire, ...</emphasis> De la même façon que pour l’héritage objet en programmation, les sous-types peuvent avoir de nouveaux "attributes". Toutefois, dans les formats actuels, les héritages sont très rares. 
        </para>
        
        <figure> 
            <title>Architecture des interfaces</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/org.opengis.feature.type.png" format="png"></imagedata>
                </imageobject>
                <textobject>
                    <phrase> Architecture des interfaces
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        
        <figure> 
            <title>Classe FeatureType</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/simple.GIF" format="gif"></imagedata>
                </imageobject>
                <textobject>
                    <phrase> Classe FeatureType
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>
            Un FeatureType se compose de <emphasis>PropertyDescriptor</emphasis> , chacun définissant le nom et les différents paramètres d'une propriété.
        </para>
        <para>
            Il existe 4 types de propriété :
            <itemizedlist>
                <listitem>
                    Attribute : c'est le plus simple, il définit un attribut simple qui contient une valeur primitive, une chaine de caractère, un nombre, une date ...
                </listitem>
                <listitem>Geometrie : similaire au AttributeDescriptor mais limité aux géométries et disposant d'informations complémentaires comme le CRS
                </listitem>
                <listitem> : peu utilisé cela peut faire référence à une valeur calculée ou à des fonctionnalités
                </listitem>
                <listitem>Association : permet de faire un lien vers d'autre Feature pour exprimer une relation.</listitem>
            </itemizedlist>
        </para>
        <para>
            On entend souvent parler de <emphasis>SimpleFeature</emphasis>. La quasi-totalité des librairies et applications existantes ne sont capables de ne traiter que ce modèle. Un SimpleFeature est une simplification du modèle avec les contraintes suivantes :
            <itemizedlist>
                <listitem>
                    Toutes les propriétés doivent être des "attributes"
                </listitem>
                <listitem>Toutes les propriétés doivent avoir un minimum et un maximum de 1</listitem>
            </itemizedlist>
            On peut classer les formats CSV, shapefile comme des types simples et GPX ou OpenStreetMap comme complexes.
        </para>

    </section>
    
    <section>
        <title>FeatureTypeBuilder</title>
        <example>
            <title>Création de FeatureType</title>
            <link xlink:href="http://hg.geotoolkit.org/geotoolkit-pending/files/tip/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/FeatureTypeBuilderDemo.java">
                <acronym>geotoolkit-pending/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/datamodel/FeatureTypeBuilderDemo.java</acronym>
            </link>        
        </example>
        <para>
            La manière par défaut de procéder pour créer un FeatureType est d'utiliser une <emphasis>FeatureTypeFactory</emphasis> toutefois ceci est très verbeux.
        </para>
        <para>Afin de simplifier ce travail, une classe utilitaire <emphasis>FeatureTypeBuilder</emphasis> a été ajoutée évitant ainsi quantité d'erreur de déclaration, celui ci se charge de créer les types correctes avec les informations fournies.
        </para>
        <para>
            On procède par ajout, en spécifiant le nom de l'attribut que l'on souhaite, son type et éventuellement dans le cas de geometrie, la projection.
        </para>
            <programlisting>
                
                    final FeatureTypeBuilder ftb = new FeatureTypeBuilder();
                    ftb.setName("Fish");
                    ftb.add("name", String.class);
                    ftb.add("length", Integer.class);
                    ftb.add("lastPosition", LineString.class, CRS.decode("EPSG:3395"));
                    ftb.add("lastPositionDate", Date.class);
                    ftb.add("direction", Float.class);
                    ftb.setDefaultGeometry("lastPosition");
                    final SimpleFeatureType sft = ftb.buildSimpleFeatureType();
                
            </programlisting>

        <para>
            Une attention particulière à été portée sur les différentes méthode toString() afin de simplifier le debuggage.
        </para>

            <programlisting>
                
                    DefaultSimpleFeatureType Fish identified extends Feature
                    ╔══════════════════╤══════╤══════╤═══════════╤════════════╤═══════════╤═══════════╗
                    ║ name             │  min │  max │  nillable │  type      │  CRS      │  UserData ║
                    ╟──────────────────┼──────┼──────┼───────────┼────────────┼───────────┼───────────╢
                    ║ name             │ 1    │ 1    │ true      │ String     │           │           ║
                    ║ length           │ 1    │ 1    │ true      │ Integer    │           │           ║
                    ║ lastPosition     │ 1    │ 1    │ true      │ LineString │ EPSG:3395 │           ║
                    ║ lastPositionDate │ 1    │ 1    │ true      │ Date       │           │           ║
                    ║ direction        │ 1    │ 1    │ true      │ Float      │           │           ║
                    ╚══════════════════╧══════╧══════╧═══════════╧════════════╧═══════════╧═══════════╝
                    crs=EPSG:WGS 84 / World Mercator

                
            </programlisting>

        <para>
            Un exemple de création d'un type complexe est aussi présent dans le code source complet.
        </para>

    </section>
</section>
