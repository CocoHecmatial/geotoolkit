<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
  <!ENTITY % book.entities SYSTEM "../../../book.entities">
  %book.entities;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink = "http://www.w3.org/1999/xlink">
          
    <title>
        Service-report
    </title>
    
    <para>
        Pour générer des rapports ou des atlas, GeotoolKit utilise l'api 
        <emphasis>JasperReports</emphasis>. JasperReports est l'api Java la plus complète pour la génération de rapports et dispose d'un éditeur dédié nommé IReport. Comme nous allons devoir dessiner des éléments spéciaux pour les cartes, légendes, barre d'échelle ... il va être nécessaire de créer un rapport spécifique.
    </para>
    
    <section>
        <title>Editeur IReport</title>
        
        <para>
            IReport peut être téléchargé ici : 
            <link xlink:href="http://jasperforge.org/projects/ireport">http://jasperforge.org/projects/ireport</link>
        </para>
        <para>
            Aperçu de l'application :
        </para>
        
        <figure> 
            <title>Accueil de iReport 3.7.4</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/capture-ireport_3.7.4.png" format="png"></imagedata>
                </imageobject>
                <textobject>
                    <phrase> Accueil de iReport 3.7.4
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        
        <para>
            Si vous n'êtes pas familier avec JasperReports ou IReport, la documentation est accessible 
            <link xlink:href="http://jasperforge.org//website/ireportwebsite/IR%20Website/ir_documentation.html?header=project&amp;target=ireport">ici.</link>
        </para>
        
        <section>
            <title>Les champs</title>
            <para>
                Lors de la création d'un rapport, deux type d'informations seront utilisés lors de la génération :
                <orderedlist>
                    <listitem>Parameters</listitem>
                    <listitem>Fields</listitem>
                </orderedlist>
                Lorsque l'on aura fini d'établir notre rapport, les paramètres seront donnés avec un objet Map, et les champs seront transformés en FeatureType .
            </para>
        
            <figure> 
                <title>Champs source</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/reportfields.png" format="png"></imagedata>
                    </imageobject>
                    <textobject>
                        <phrase> Champs source
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        
            <para>
                seront transformés dans le FeatureType : 
            </para>
            <para>
                <programlisting>
                
                    ╔═════════════╤══════╤══════╤═══════════╤═══════════════╤══════╤════════════╗
                    ║ name        │  min │  max │  nillable │  type         │  CRS │  UserData  ║
                    ╟─────────────┼──────┼──────┼───────────┼───────────────┼──────┼────────────╢
                    ║ CNTRY_NAME  │ 1    │ 1    │ true      │ String        │      │            ║
                    ║ POP_CNTRY   │ 1    │ 1    │ true      │ Integer       │      │            ║
                    ║ map3        │ 1    │ 1    │ true      │ MapDef        │      │            ║
                    ║ chart4      │ 1    │ 1    │ true      │ ChartDef      │      │            ║
                    ║ legend5     │ 1    │ 1    │ true      │ LegendDef     │      │ map=map3   ║
                    ║ scalebar6   │ 1    │ 1    │ true      │ ScaleBarDef   │      │ map=map3   ║
                    ║ northarrow7 │ 1    │ 1    │ true      │ NorthArrowDef │      │ map=map3   ║
                    ║ table8      │ 1    │ 1    │ true      │ JRDataSource  │      │            ║
                    ║ minimap     │ 1    │ 1    │ true      │ MapDef        │      │            ║
                    ╚═════════════╧══════╧══════╧═══════════╧═══════════════╧══════╧════════════╝
                </programlisting>
            </para>
            <para>
                Si l'on regarde les binding du FeatureType, on voit MapDef, ChartDef, LegendDef ... 
            </para>
            <para>
                Ce sont des types de champ que GeotoolKit peut reconnaître.
            </para>
            <para>
                Pour définir ces types, on doit éditer la classe du champ dans IReport : 
            </para>
        
            <figure> 
                <title>Champs de définition de classe</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/service-report_Field_Class.png" format="png"></imagedata>
                    </imageobject>
                    <textobject>
                        <phrase> Champs de définition de classe
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        
            <para>
                La liste des champs reconnus est :
                <itemizedlist>
                    <listitem>org.geotoolkit.report.graphic.map.MapDef</listitem>
                    <listitem>org.geotoolkit.report.graphic.chart.ChartDef</listitem>
                    <listitem>org.geotoolkit.report.graphic.legend.LegendDef</listitem>
                    <listitem>org.geotoolkit.report.graphic.scalebar.ScaleBarDef</listitem>
                    <listitem>org.geotoolkit.report.graphic.northarrow.NorthArrowDef</listitem>
                </itemizedlist>
                Pour les types legend, scalebar et north arrow, il est nécessaire d'indiquer à quelle carte le type se rapporte. Cette information se définit dans les propriétés du champ :
            </para>
        
            <figure> 
                <title>Fenêtre de propriétés du champs</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/service-report_properties.png" format="png"></imagedata>
                    </imageobject>
                    <textobject>
                        <phrase> Fenêtre de propriétés du champs
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
        <section>
        
            <title>Report detail</title>
            <para>
                <literallayout>
                    Les classes ci-dessus sont des sous-classes de net.sf.jasperreports.engine.JRRenderable.

                    JasperReport a défini JRRenderable spécialement pour le cas comme celui-ci, cela nous permet d'utiliser les capacités du moteur de rendu directement dans JasperReports.

                    Lors de la génération du rapport, JasperReport va déléguer le travail de dessin au JRRenderable, et indirectement à notre moteur de rendu.

                    Chaque champ JRRenderable doit être déclaré comme une image :
                </literallayout>
            </para>
        
            <figure> 
                <title>Propriétés du champs</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/service-report_detailclass.png" format="png"></imagedata>
                    </imageobject>
                    <textobject>
                        <phrase> Propriétés du champs
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
    </section>
    
    <section>
        <title>JasperReportService</title>
        
        <example>
            <title>Génération de rapport avec JasperReport</title>
            <para>
                <link xlink:href="http://hg.geotoolkit.org/geotoolkit-pending/files/tip/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/rendering/ReportDemo.java">
                    <acronym>geotoolkit-pending/demos/geotk-demo-samples/src/main/java/org/geotoolkit/pending/demo/rendering/ReportDemo.java</acronym>
                </link> 
            </para>
            <para>
                <link xlink:href="http://hg.geotoolkit.org/geotoolkit-pending/files/tip/demos/geotk-demo-samples/src/main/resources/data/report/simpleReport.jrxml">
                    <acronym>geotoolkit-pending/demos/geotk-demo-samples/src/main/resources/data/report/simpleReport.jrxml</acronym>
                </link>
            </para> 
            <para>
                <link xlink:href="http://hg.geotoolkit.org/geotoolkit-pending/files/tip/demos/geotk-demo-samples/src/main/resources/data/report/complexReport.jrxml">
                    <acronym>geotoolkit-pending/demos/geotk-demo-samples/src/main/java/resources/data/report/complexReport.jrxml</acronym>
                </link>
            </para>
        </example>
        
        <para>
            resources/data/report/complexReport.jrxml
            
            <orderedlist>
                <listitem>
                    Parser le template
                        
                    <programlisting>
                        
                        final File template = ...
                        final Entry&lt;JasperReport,FeatureType&gt; entry = JasperReportService.prepareTemplate(template);
                        final JasperReport report = entry.getKey();
                        final FeatureType type = entry.getValue();
                    </programlisting>
                    <para>
                        Cette étape va générer le FeatureType associé au template.
                    </para>   
                </listitem>
                <listitem>
                    
                    Préparer les données
                        
                    <para>
                        <para>
                            Cette partie dépend entièrement de votre template.
                        </para>
                        <para>
                            L'objectif est de générer une FeatureCollection avec le featuretype fourni, cette étape dépend entièrement du template et des données que vous avez en entrée.
                        </para>
                        <para>
                            Le featuretype peut ne pas être rigoureusement identique, les propriétés manquantes seront remplacées par des null .
                        </para>
                        <para>
                            Dans IReport vous pouvez spécifier le comportement lors d'une valeur nulle.
                        </para>
                    </para>  
                </listitem>
                <listitem>
                    Générer le rapport
                    <programlisting>
                        
                        final OutputDef output = new OutputDef(JasperReportService.MIME_PDF, new File("atlas.pdf"));
                        JasperReportService.generateReport(report, featureCollection, parameters, output);
                    </programlisting>
                    <para>
                        Cette étape peut être plus ou moins longue et utiliser plus ou de mémoire en fonction de la complexité du rapport et la quantité de donnée a traiter.
                    </para>
                </listitem>
            </orderedlist>
        </para>
    </section>

</section>
